
F070_210829_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004648  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c4  080048c4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080048c4  080048c4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048c4  080048c4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080048cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000084  08004950  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08004950  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ee  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002767  00000000  00000000  00030a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00033208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00034020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001213c  00000000  00000000  00034d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001133b  00000000  00000000  00046e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000699cb  00000000  00000000  000581a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1b72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003588  00000000  00000000  000c1bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080046f0 	.word	0x080046f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080046f0 	.word	0x080046f0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <HAL_ADC_ConvCpltCallback>:

/*
 * 		Funktionsdefinitionen
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	scheduler();
 8000410:	f000 f804 	bl	800041c <scheduler>
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}

0800041c <scheduler>:

void scheduler()
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af02      	add	r7, sp, #8
	ClearADCBuffer(adcBuffer);
 8000422:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <scheduler+0xb8>)
 8000424:	0018      	movs	r0, r3
 8000426:	f000 f86b 	bl	8000500 <ClearADCBuffer>

	GetADCMeanValue(adcVal, 5);
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <scheduler+0xbc>)
 800042c:	2105      	movs	r1, #5
 800042e:	0018      	movs	r0, r3
 8000430:	f000 f88e 	bl	8000550 <GetADCMeanValue>

	GetADCResistance(adcBufferMeanValue);
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <scheduler+0xc0>)
 8000436:	0018      	movs	r0, r3
 8000438:	f000 f8d8 	bl	80005ec <GetADCResistance>

	GetTempCArray(tempC, adcChannel, LUT, ntcResistance, LUToldValues);
 800043c:	4928      	ldr	r1, [pc, #160]	; (80004e0 <scheduler+0xc4>)
 800043e:	4a29      	ldr	r2, [pc, #164]	; (80004e4 <scheduler+0xc8>)
 8000440:	4829      	ldr	r0, [pc, #164]	; (80004e8 <scheduler+0xcc>)
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <scheduler+0xd0>)
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	000b      	movs	r3, r1
 8000448:	2109      	movs	r1, #9
 800044a:	f000 fbac 	bl	8000ba6 <GetTempCArray>

	for(int i = 0; i < adcChannel; i++)			// auch noch in eine Funktion packen, um hier nur noch den Call stehen zu haben
 800044e:	2300      	movs	r3, #0
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	e00f      	b.n	8000474 <scheduler+0x58>
	{
		CRCtempC[i] = generateCRC32(tempC[i], adcChannel);
 8000454:	4a24      	ldr	r2, [pc, #144]	; (80004e8 <scheduler+0xcc>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	18d3      	adds	r3, r2, r3
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2109      	movs	r1, #9
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fc3a 	bl	8000cd8 <generateCRC32>
 8000464:	0001      	movs	r1, r0
 8000466:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <scheduler+0xd4>)
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	0092      	lsls	r2, r2, #2
 800046c:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < adcChannel; i++)			// auch noch in eine Funktion packen, um hier nur noch den Call stehen zu haben
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3301      	adds	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b08      	cmp	r3, #8
 8000478:	ddec      	ble.n	8000454 <scheduler+0x38>
	}

	checksumNumber = 0;
 800047a:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <scheduler+0xd8>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 3; i++)
 8000480:	2300      	movs	r3, #0
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	e015      	b.n	80004b2 <scheduler+0x96>
	{
		checksum[i] = generateChecksum(tempC, checksumNumber);
 8000486:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <scheduler+0xd8>)
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <scheduler+0xcc>)
 800048c:	0011      	movs	r1, r2
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fc40 	bl	8000d14 <generateChecksum>
 8000494:	0003      	movs	r3, r0
 8000496:	0019      	movs	r1, r3
 8000498:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <scheduler+0xdc>)
 800049a:	683a      	ldr	r2, [r7, #0]
 800049c:	0052      	lsls	r2, r2, #1
 800049e:	52d1      	strh	r1, [r2, r3]
		checksumNumber++;
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <scheduler+0xd8>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <scheduler+0xd8>)
 80004aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 3; i++)
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	3301      	adds	r3, #1
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	dde6      	ble.n	8000486 <scheduler+0x6a>
	}

	TxUART(adcChannel, tempC, CRCtempC, checksum, millis);		// später auch CRCtempC übergeben
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <scheduler+0xe0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	480e      	ldr	r0, [pc, #56]	; (80004f8 <scheduler+0xdc>)
 80004be:	4a0c      	ldr	r2, [pc, #48]	; (80004f0 <scheduler+0xd4>)
 80004c0:	4909      	ldr	r1, [pc, #36]	; (80004e8 <scheduler+0xcc>)
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	0003      	movs	r3, r0
 80004c6:	2009      	movs	r0, #9
 80004c8:	f000 fe6f 	bl	80011aa <TxUART>
}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000100 	.word	0x20000100
 80004d8:	20000188 	.word	0x20000188
 80004dc:	2000015c 	.word	0x2000015c
 80004e0:	20000170 	.word	0x20000170
 80004e4:	08004748 	.word	0x08004748
 80004e8:	200000a0 	.word	0x200000a0
 80004ec:	200000dc 	.word	0x200000dc
 80004f0:	200000b4 	.word	0x200000b4
 80004f4:	200000d8 	.word	0x200000d8
 80004f8:	200000ac 	.word	0x200000ac
 80004fc:	200000f4 	.word	0x200000f4

08000500 <ClearADCBuffer>:


uint16_t *ClearADCBuffer(uint16_t *adcBuffer)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < (adcChannel * adcSamples); i++)
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	e011      	b.n	8000532 <ClearADCBuffer+0x32>
	{
		// Übertragung des Werts vom Buffer auf ein weiteres Array
		adcVal[i] = adcBuffer[i];
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	18d3      	adds	r3, r2, r3
 8000516:	8819      	ldrh	r1, [r3, #0]
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <ClearADCBuffer+0x4c>)
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	0052      	lsls	r2, r2, #1
 800051e:	52d1      	strh	r1, [r2, r3]

		// Nullsetzung der Position des übertragenen Buffereintrags
		adcBuffer[i] = 0;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	18d3      	adds	r3, r2, r3
 8000528:	2200      	movs	r2, #0
 800052a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < (adcChannel * adcSamples); i++)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	3301      	adds	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	2305      	movs	r3, #5
 8000534:	001a      	movs	r2, r3
 8000536:	0013      	movs	r3, r2
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	189b      	adds	r3, r3, r2
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	429a      	cmp	r2, r3
 8000540:	dbe5      	blt.n	800050e <ClearADCBuffer+0xe>
	}

	return adcVal;
 8000542:	4b02      	ldr	r3, [pc, #8]	; (800054c <ClearADCBuffer+0x4c>)
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	b004      	add	sp, #16
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000188 	.word	0x20000188

08000550 <GetADCMeanValue>:


uint16_t *GetADCMeanValue(uint16_t *adcVal, uint8_t adcSamples)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	000a      	movs	r2, r1
 800055a:	1cfb      	adds	r3, r7, #3
 800055c:	701a      	strb	r2, [r3, #0]
	int k = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]

	// Aufaddieren der Samples pro Channel
	for(int i = 0; i < adcChannel; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e037      	b.n	80005d8 <GetADCMeanValue+0x88>
	{
		for(int i = 0; i < adcChannel; i++)
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	e01d      	b.n	80005aa <GetADCMeanValue+0x5a>
		{
			for(int j = 0; j < adcSamples; j++)
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	e012      	b.n	800059a <GetADCMeanValue+0x4a>
			{
				k = i + j * adcSamples;
 8000574:	1cfb      	adds	r3, r7, #3
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	4353      	muls	r3, r2
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	18d3      	adds	r3, r2, r3
 8000580:	60bb      	str	r3, [r7, #8]

				adcBufferMeanValue[i] = adcVal[k];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	18d3      	adds	r3, r2, r3
 800058a:	8819      	ldrh	r1, [r3, #0]
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <GetADCMeanValue+0x98>)
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	0052      	lsls	r2, r2, #1
 8000592:	52d1      	strh	r1, [r2, r3]
			for(int j = 0; j < adcSamples; j++)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3301      	adds	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	1cfb      	adds	r3, r7, #3
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dbe7      	blt.n	8000574 <GetADCMeanValue+0x24>
		for(int i = 0; i < adcChannel; i++)
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	3301      	adds	r3, #1
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	2b08      	cmp	r3, #8
 80005ae:	ddde      	ble.n	800056e <GetADCMeanValue+0x1e>
			}
		}

		// Mittelwertbildung durch Teilen der Summe durch die Sample-Zahl
		adcBufferMeanValue[i] = adcBufferMeanValue[i] / adcSamples;
 80005b0:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <GetADCMeanValue+0x98>)
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	5ad3      	ldrh	r3, [r2, r3]
 80005b8:	001a      	movs	r2, r3
 80005ba:	1cfb      	adds	r3, r7, #3
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	0019      	movs	r1, r3
 80005c0:	0010      	movs	r0, r2
 80005c2:	f7ff fe35 	bl	8000230 <__divsi3>
 80005c6:	0003      	movs	r3, r0
 80005c8:	b299      	uxth	r1, r3
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <GetADCMeanValue+0x98>)
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < adcChannel; i++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2b08      	cmp	r3, #8
 80005dc:	ddc4      	ble.n	8000568 <GetADCMeanValue+0x18>
	}

	return adcBufferMeanValue;
 80005de:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <GetADCMeanValue+0x98>)
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b006      	add	sp, #24
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000015c 	.word	0x2000015c

080005ec <GetADCResistance>:


uint16_t *GetADCResistance(uint16_t *adcBufferMeanValue)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	// Berechnung der Spannung an den NTCs
	for(int i = 0; i < adcChannel; i++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e018      	b.n	800062c <GetADCResistance+0x40>
	{
		adcVoltage[i] = 33 * (adcBufferMeanValue[i] * 10) / 4095;
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	18d3      	adds	r3, r2, r3
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	001a      	movs	r2, r3
 8000606:	0013      	movs	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	189b      	adds	r3, r3, r2
 800060c:	015a      	lsls	r2, r3, #5
 800060e:	189b      	adds	r3, r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	491e      	ldr	r1, [pc, #120]	; (800068c <GetADCResistance+0xa0>)
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff fe0b 	bl	8000230 <__divsi3>
 800061a:	0003      	movs	r3, r0
 800061c:	b299      	uxth	r1, r3
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <GetADCResistance+0xa4>)
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	0052      	lsls	r2, r2, #1
 8000624:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < adcChannel; i++)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	2b08      	cmp	r3, #8
 8000630:	dde3      	ble.n	80005fa <GetADCResistance+0xe>
	}

	// Berechnung der einzelnen NTC-Widerstände
	for(int i = 0; i < adcChannel; i++)
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	e021      	b.n	800067c <GetADCResistance+0x90>
	{
		// Aufteilung der Berechnungsoperation notwendig, da keine FPU vorhanden
		uint32_t tmp = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
		tmp = (ntcResistance25[i] * (330 - adcVoltage[i]));
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <GetADCResistance+0xa8>)
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	0052      	lsls	r2, r2, #1
 8000642:	5ad3      	ldrh	r3, [r2, r3]
 8000644:	0019      	movs	r1, r3
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <GetADCResistance+0xa4>)
 8000648:	693a      	ldr	r2, [r7, #16]
 800064a:	0052      	lsls	r2, r2, #1
 800064c:	5ad3      	ldrh	r3, [r2, r3]
 800064e:	001a      	movs	r2, r3
 8000650:	23a5      	movs	r3, #165	; 0xa5
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	434b      	muls	r3, r1
 8000658:	60fb      	str	r3, [r7, #12]
		ntcResistance[i] = (tmp / adcVoltage[i]);
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <GetADCResistance+0xa4>)
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	0052      	lsls	r2, r2, #1
 8000660:	5ad3      	ldrh	r3, [r2, r3]
 8000662:	0019      	movs	r1, r3
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff fd59 	bl	800011c <__udivsi3>
 800066a:	0003      	movs	r3, r0
 800066c:	b299      	uxth	r1, r3
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <GetADCResistance+0xac>)
 8000670:	693a      	ldr	r2, [r7, #16]
 8000672:	0052      	lsls	r2, r2, #1
 8000674:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < adcChannel; i++)
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	3301      	adds	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	2b08      	cmp	r3, #8
 8000680:	ddda      	ble.n	8000638 <GetADCResistance+0x4c>
	}

	return ntcResistance;
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <GetADCResistance+0xac>)

}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	b006      	add	sp, #24
 800068a:	bd80      	pop	{r7, pc}
 800068c:	00000fff 	.word	0x00000fff
 8000690:	200001e8 	.word	0x200001e8
 8000694:	20000000 	.word	0x20000000
 8000698:	20000170 	.word	0x20000170

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fe9a 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f826 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 fa52 	bl	8000b50 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ac:	f000 fa2a 	bl	8000b04 <MX_DMA_Init>
  MX_ADC_Init();
 80006b0:	f000 f88a 	bl	80007c8 <MX_ADC_Init>
  MX_TIM1_Init();
 80006b4:	f000 f96a 	bl	800098c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006b8:	f000 f9ea 	bl	8000a90 <MX_USART1_UART_Init>
  MX_CRC_Init();
 80006bc:	f000 f946 	bl	800094c <MX_CRC_Init>
  MX_TIM14_Init();
 80006c0:	f000 f9be 	bl	8000a40 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <main+0x48>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f002 fda2 	bl	8003210 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim14);
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <main+0x4c>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f002 fd9e 	bl	8003210 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcBuffer, buffLength);
 80006d4:	4905      	ldr	r1, [pc, #20]	; (80006ec <main+0x50>)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <main+0x54>)
 80006d8:	222d      	movs	r2, #45	; 0x2d
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 f820 	bl	8001720 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <main+0x44>
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	200002e0 	.word	0x200002e0
 80006e8:	20000328 	.word	0x20000328
 80006ec:	20000100 	.word	0x20000100
 80006f0:	200003b4 	.word	0x200003b4

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b097      	sub	sp, #92	; 0x5c
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	2428      	movs	r4, #40	; 0x28
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	0018      	movs	r0, r3
 8000700:	2330      	movs	r3, #48	; 0x30
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f003 fbc5 	bl	8003e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070a:	2318      	movs	r3, #24
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	0018      	movs	r0, r3
 8000710:	2310      	movs	r3, #16
 8000712:	001a      	movs	r2, r3
 8000714:	2100      	movs	r1, #0
 8000716:	f003 fbbd 	bl	8003e94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	0018      	movs	r0, r3
 800071e:	2314      	movs	r3, #20
 8000720:	001a      	movs	r2, r3
 8000722:	2100      	movs	r1, #0
 8000724:	f003 fbb6 	bl	8003e94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000728:	0021      	movs	r1, r4
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2212      	movs	r2, #18
 800072e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2201      	movs	r2, #1
 8000734:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2210      	movs	r2, #16
 8000740:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2210      	movs	r2, #16
 8000746:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2202      	movs	r2, #2
 800074c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0212      	lsls	r2, r2, #8
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0312      	lsls	r2, r2, #12
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	187b      	adds	r3, r7, r1
 8000766:	0018      	movs	r0, r3
 8000768:	f001 ffb2 	bl	80026d0 <HAL_RCC_OscConfig>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000770:	f000 fa14 	bl	8000b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	2118      	movs	r1, #24
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2202      	movs	r2, #2
 8000780:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	00d2      	lsls	r2, r2, #3
 800078e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2101      	movs	r1, #1
 8000794:	0018      	movs	r0, r3
 8000796:	f002 fab9 	bl	8002d0c <HAL_RCC_ClockConfig>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800079e:	f000 f9fd 	bl	8000b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fbff 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ba:	f000 f9ef 	bl	8000b9c <Error_Handler>
  }
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b017      	add	sp, #92	; 0x5c
 80007c4:	bd90      	pop	{r4, r7, pc}
	...

080007c8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	0018      	movs	r0, r3
 80007d2:	230c      	movs	r3, #12
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f003 fb5c 	bl	8003e94 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80007dc:	4b59      	ldr	r3, [pc, #356]	; (8000944 <MX_ADC_Init+0x17c>)
 80007de:	4a5a      	ldr	r2, [pc, #360]	; (8000948 <MX_ADC_Init+0x180>)
 80007e0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e2:	4b58      	ldr	r3, [pc, #352]	; (8000944 <MX_ADC_Init+0x17c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007e8:	4b56      	ldr	r3, [pc, #344]	; (8000944 <MX_ADC_Init+0x17c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ee:	4b55      	ldr	r3, [pc, #340]	; (8000944 <MX_ADC_Init+0x17c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007f4:	4b53      	ldr	r3, [pc, #332]	; (8000944 <MX_ADC_Init+0x17c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fa:	4b52      	ldr	r3, [pc, #328]	; (8000944 <MX_ADC_Init+0x17c>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000800:	4b50      	ldr	r3, [pc, #320]	; (8000944 <MX_ADC_Init+0x17c>)
 8000802:	2200      	movs	r2, #0
 8000804:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000806:	4b4f      	ldr	r3, [pc, #316]	; (8000944 <MX_ADC_Init+0x17c>)
 8000808:	2200      	movs	r2, #0
 800080a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800080c:	4b4d      	ldr	r3, [pc, #308]	; (8000944 <MX_ADC_Init+0x17c>)
 800080e:	2200      	movs	r2, #0
 8000810:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000812:	4b4c      	ldr	r3, [pc, #304]	; (8000944 <MX_ADC_Init+0x17c>)
 8000814:	2200      	movs	r2, #0
 8000816:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000818:	4b4a      	ldr	r3, [pc, #296]	; (8000944 <MX_ADC_Init+0x17c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800081e:	4b49      	ldr	r3, [pc, #292]	; (8000944 <MX_ADC_Init+0x17c>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	00d2      	lsls	r2, r2, #3
 8000824:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000826:	4b47      	ldr	r3, [pc, #284]	; (8000944 <MX_ADC_Init+0x17c>)
 8000828:	2224      	movs	r2, #36	; 0x24
 800082a:	2101      	movs	r1, #1
 800082c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800082e:	4b45      	ldr	r3, [pc, #276]	; (8000944 <MX_ADC_Init+0x17c>)
 8000830:	2200      	movs	r2, #0
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000834:	4b43      	ldr	r3, [pc, #268]	; (8000944 <MX_ADC_Init+0x17c>)
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fe32 	bl	80014a0 <HAL_ADC_Init>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000840:	f000 f9ac 	bl	8000b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	0152      	lsls	r2, r2, #5
 8000850:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2207      	movs	r2, #7
 8000856:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000858:	1d3a      	adds	r2, r7, #4
 800085a:	4b3a      	ldr	r3, [pc, #232]	; (8000944 <MX_ADC_Init+0x17c>)
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fff0 	bl	8001844 <HAL_ADC_ConfigChannel>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000868:	f000 f998 	bl	8000b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000872:	1d3a      	adds	r2, r7, #4
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <MX_ADC_Init+0x17c>)
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f000 ffe3 	bl	8001844 <HAL_ADC_ConfigChannel>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000882:	f000 f98b 	bl	8000b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2202      	movs	r2, #2
 800088a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800088c:	1d3a      	adds	r2, r7, #4
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_ADC_Init+0x17c>)
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f000 ffd6 	bl	8001844 <HAL_ADC_ConfigChannel>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800089c:	f000 f97e 	bl	8000b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2203      	movs	r2, #3
 80008a4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008a6:	1d3a      	adds	r2, r7, #4
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_ADC_Init+0x17c>)
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 ffc9 	bl	8001844 <HAL_ADC_ConfigChannel>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80008b6:	f000 f971 	bl	8000b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2204      	movs	r2, #4
 80008be:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008c0:	1d3a      	adds	r2, r7, #4
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_ADC_Init+0x17c>)
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 ffbc 	bl	8001844 <HAL_ADC_ConfigChannel>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 80008d0:	f000 f964 	bl	8000b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2205      	movs	r2, #5
 80008d8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008da:	1d3a      	adds	r2, r7, #4
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_ADC_Init+0x17c>)
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 ffaf 	bl	8001844 <HAL_ADC_ConfigChannel>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC_Init+0x126>
  {
    Error_Handler();
 80008ea:	f000 f957 	bl	8000b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2206      	movs	r2, #6
 80008f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008f4:	1d3a      	adds	r2, r7, #4
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_ADC_Init+0x17c>)
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 ffa2 	bl	8001844 <HAL_ADC_ConfigChannel>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8000904:	f000 f94a 	bl	8000b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2207      	movs	r2, #7
 800090c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800090e:	1d3a      	adds	r2, r7, #4
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_ADC_Init+0x17c>)
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f000 ff95 	bl	8001844 <HAL_ADC_ConfigChannel>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800091e:	f000 f93d 	bl	8000b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2209      	movs	r2, #9
 8000926:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000928:	1d3a      	adds	r2, r7, #4
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_ADC_Init+0x17c>)
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f000 ff88 	bl	8001844 <HAL_ADC_ConfigChannel>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8000938:	f000 f930 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b004      	add	sp, #16
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200003b4 	.word	0x200003b4
 8000948:	40012400 	.word	0x40012400

0800094c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_CRC_Init+0x38>)
 8000952:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <MX_CRC_Init+0x3c>)
 8000954:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_CRC_Init+0x38>)
 8000958:	2200      	movs	r2, #0
 800095a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_CRC_Init+0x38>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_CRC_Init+0x38>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_CRC_Init+0x38>)
 800096a:	2201      	movs	r2, #1
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <MX_CRC_Init+0x38>)
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fa47 	bl	8001e04 <HAL_CRC_Init>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_CRC_Init+0x32>
  {
    Error_Handler();
 800097a:	f000 f90f 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200001fc 	.word	0x200001fc
 8000988:	40023000 	.word	0x40023000

0800098c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	2308      	movs	r3, #8
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	0018      	movs	r0, r3
 8000998:	2310      	movs	r3, #16
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f003 fa79 	bl	8003e94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	003b      	movs	r3, r7
 80009a4:	0018      	movs	r0, r3
 80009a6:	2308      	movs	r3, #8
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f003 fa72 	bl	8003e94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <MX_TIM1_Init+0xa8>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <MX_TIM1_Init+0xac>)
 80009ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4800-1;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009c4:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <MX_TIM1_Init+0xb0>)
 80009c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f002 fbc7 	bl	8003170 <HAL_TIM_Base_Init>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80009e6:	f000 f8d9 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ea:	2108      	movs	r1, #8
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	0152      	lsls	r2, r2, #5
 80009f2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f4:	187a      	adds	r2, r7, r1
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_TIM1_Init+0xa4>)
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f002 fc46 	bl	800328c <HAL_TIM_ConfigClockSource>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 f8ca 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a08:	003b      	movs	r3, r7
 8000a0a:	2220      	movs	r2, #32
 8000a0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a14:	003a      	movs	r2, r7
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_TIM1_Init+0xa4>)
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f002 fe06 	bl	800362c <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000a24:	f000 f8ba 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b006      	add	sp, #24
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200002e0 	.word	0x200002e0
 8000a34:	40012c00 	.word	0x40012c00
 8000a38:	000003e7 	.word	0x000003e7
 8000a3c:	000012bf 	.word	0x000012bf

08000a40 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_TIM14_Init+0x40>)
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <MX_TIM14_Init+0x44>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1000-1;
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_TIM14_Init+0x40>)
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <MX_TIM14_Init+0x48>)
 8000a4e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_TIM14_Init+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4800-1;
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_TIM14_Init+0x40>)
 8000a58:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <MX_TIM14_Init+0x4c>)
 8000a5a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_TIM14_Init+0x40>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_TIM14_Init+0x40>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <MX_TIM14_Init+0x40>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 fb80 	bl	8003170 <HAL_TIM_Base_Init>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a74:	f000 f892 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000328 	.word	0x20000328
 8000a84:	40002000 	.word	0x40002000
 8000a88:	000003e7 	.word	0x000003e7
 8000a8c:	000012bf 	.word	0x000012bf

08000a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000a96:	4a1a      	ldr	r2, [pc, #104]	; (8000b00 <MX_USART1_UART_Init+0x70>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000a9c:	2296      	movs	r2, #150	; 0x96
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	00d2      	lsls	r2, r2, #3
 8000ab4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000ab8:	2208      	movs	r2, #8
 8000aba:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000ad0:	2230      	movs	r2, #48	; 0x30
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	0152      	lsls	r2, r2, #5
 8000ada:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	0192      	lsls	r2, r2, #6
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <MX_USART1_UART_Init+0x6c>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 fdf2 	bl	80036d0 <HAL_UART_Init>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
 8000af0:	f000 f854 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	2000025c 	.word	0x2000025c
 8000b00:	40013800 	.word	0x40013800

08000b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_DMA_Init+0x48>)
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_DMA_Init+0x48>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	430a      	orrs	r2, r1
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_DMA_Init+0x48>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2009      	movs	r0, #9
 8000b28:	f001 f92e 	bl	8001d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b2c:	2009      	movs	r0, #9
 8000b2e:	f001 f940 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	200a      	movs	r0, #10
 8000b38:	f001 f926 	bl	8001d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000b3c:	200a      	movs	r0, #10
 8000b3e:	f001 f938 	bl	8001db2 <HAL_NVIC_EnableIRQ>

}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40021000 	.word	0x40021000

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_GPIO_Init+0x48>)
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_GPIO_Init+0x48>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	0289      	lsls	r1, r1, #10
 8000b60:	430a      	orrs	r2, r1
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_GPIO_Init+0x48>)
 8000b66:	695a      	ldr	r2, [r3, #20]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	029b      	lsls	r3, r3, #10
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_GPIO_Init+0x48>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_GPIO_Init+0x48>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	02c9      	lsls	r1, r1, #11
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <MX_GPIO_Init+0x48>)
 8000b82:	695a      	ldr	r2, [r3, #20]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	02db      	lsls	r3, r3, #11
 8000b88:	4013      	ands	r3, r2
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	40021000 	.word	0x40021000

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>

08000ba6 <GetTempCArray>:
 * 	@param	Pointer zum Array der im vorherigen Zyklus ermittelten Temperaturen
 * 	@ret	gesamtes Temperatur-Array
 */

uint8_t *GetTempCArray(uint8_t *tempC, uint8_t adcChannel, const uint16_t *LUT, uint16_t *ntcResistance, uint16_t *LUToldValues)
{
 8000ba6:	b590      	push	{r4, r7, lr}
 8000ba8:	b087      	sub	sp, #28
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	1c0a      	adds	r2, r1, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
	uint16_t startIndex = 0;
 8000bba:	2312      	movs	r3, #18
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	801a      	strh	r2, [r3, #0]

	for(int i = 0; i < adcChannel; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	e026      	b.n	8000c16 <GetTempCArray+0x70>
	{
		// Zuweisung des Start-Indizes
		startIndex = LUToldValues[i];
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bce:	18d2      	adds	r2, r2, r3
 8000bd0:	2012      	movs	r0, #18
 8000bd2:	183b      	adds	r3, r7, r0
 8000bd4:	8812      	ldrh	r2, [r2, #0]
 8000bd6:	801a      	strh	r2, [r3, #0]

		// Aufruf der Funktion, die den berechneten NTC-Widerstand mit dem LUT vergleicht
		tempC[i] = GetTempCfromLUT(LUT, ntcResistance[i], startIndex);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	18d3      	adds	r3, r2, r3
 8000be0:	8819      	ldrh	r1, [r3, #0]
 8000be2:	183b      	adds	r3, r7, r0
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	b2d8      	uxtb	r0, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	18d4      	adds	r4, r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f81a 	bl	8000c2c <GetTempCfromLUT>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	7023      	strb	r3, [r4, #0]

		// Speichern des LUT-Indizes (welcher zufällig auch der Temp. entspricht) als "Startwert" für den nächsten Zyklus
		LUToldValues[i] = tempC[i];
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	18d3      	adds	r3, r2, r3
 8000c02:	7819      	ldrb	r1, [r3, #0]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c0a:	18d3      	adds	r3, r2, r3
 8000c0c:	b28a      	uxth	r2, r1
 8000c0e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < adcChannel; i++)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	230b      	movs	r3, #11
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbd2      	blt.n	8000bc8 <GetTempCArray+0x22>
	}

	return tempC;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b007      	add	sp, #28
 8000c2a:	bd90      	pop	{r4, r7, pc}

08000c2c <GetTempCfromLUT>:
 * 	@param	Übergabe des durch den ADC ermittelten Widerstands eines NTCs
 * 	@ret	ermittelte Temperatur in Grad Celsius
 */

uint8_t GetTempCfromLUT(const uint16_t *LUT, uint16_t ntcResistance, uint8_t startIndex)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	0008      	movs	r0, r1
 8000c36:	0011      	movs	r1, r2
 8000c38:	1cbb      	adds	r3, r7, #2
 8000c3a:	1c02      	adds	r2, r0, #0
 8000c3c:	801a      	strh	r2, [r3, #0]
 8000c3e:	1c7b      	adds	r3, r7, #1
 8000c40:	1c0a      	adds	r2, r1, #0
 8000c42:	701a      	strb	r2, [r3, #0]
	// int i = 0;
	uint8_t tempC;

	// neue Variante **********************************************************************
	if(LUT[startIndex] > ntcResistance)
 8000c44:	1c7b      	adds	r3, r7, #1
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	1cba      	adds	r2, r7, #2
 8000c52:	8812      	ldrh	r2, [r2, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d210      	bcs.n	8000c7a <GetTempCfromLUT+0x4e>
	{
		while(ntcResistance < LUT[startIndex])
 8000c58:	e004      	b.n	8000c64 <GetTempCfromLUT+0x38>
		{
			startIndex++;
 8000c5a:	1c7b      	adds	r3, r7, #1
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	1c7b      	adds	r3, r7, #1
 8000c60:	3201      	adds	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
		while(ntcResistance < LUT[startIndex])
 8000c64:	1c7b      	adds	r3, r7, #1
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	1cba      	adds	r2, r7, #2
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d3f0      	bcc.n	8000c5a <GetTempCfromLUT+0x2e>
 8000c78:	e019      	b.n	8000cae <GetTempCfromLUT+0x82>
		}
	}
	else if(LUT[startIndex] < ntcResistance)
 8000c7a:	1c7b      	adds	r3, r7, #1
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	18d3      	adds	r3, r2, r3
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	1cba      	adds	r2, r7, #2
 8000c88:	8812      	ldrh	r2, [r2, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d90f      	bls.n	8000cae <GetTempCfromLUT+0x82>
	{
		while(ntcResistance > LUT[startIndex])
 8000c8e:	e004      	b.n	8000c9a <GetTempCfromLUT+0x6e>
		{
			startIndex--;
 8000c90:	1c7b      	adds	r3, r7, #1
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	1c7b      	adds	r3, r7, #1
 8000c96:	3a01      	subs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
		while(ntcResistance > LUT[startIndex])
 8000c9a:	1c7b      	adds	r3, r7, #1
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	18d3      	adds	r3, r2, r3
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	1cba      	adds	r2, r7, #2
 8000ca8:	8812      	ldrh	r2, [r2, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d8f0      	bhi.n	8000c90 <GetTempCfromLUT+0x64>
	// {
	// 	i++;
	// }

	// Temperaturzuweisung
	tempC = startIndex;
 8000cae:	210f      	movs	r1, #15
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	1c7a      	adds	r2, r7, #1
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	701a      	strb	r2, [r3, #0]

	// Plausibilitätskontrolle
	if(tempC < 0 || tempC > 150)		// angeg. Temperaturbereich der NTCs: < 125 Grad Celsius!!!
 8000cb8:	000a      	movs	r2, r1
 8000cba:	18bb      	adds	r3, r7, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b96      	cmp	r3, #150	; 0x96
 8000cc0:	d902      	bls.n	8000cc8 <GetTempCfromLUT+0x9c>
	{
		tempC = 255;
 8000cc2:	18bb      	adds	r3, r7, r2
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	701a      	strb	r2, [r3, #0]
	}

	return tempC;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	781b      	ldrb	r3, [r3, #0]
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b004      	add	sp, #16
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <generateCRC32>:
 * 	@param	ermittelte Temperatur
 * 	@ret	CRC
 */

uint32_t generateCRC32(uint8_t tempC, uint8_t adcChannel)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	1c0a      	adds	r2, r1, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
	uint32_t CRCtempC = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]

	CRCtempC = HAL_CRC_Calculate(&hcrc, (uint32_t *)tempC, adcChannel);
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	1dbb      	adds	r3, r7, #6
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <generateCRC32+0x38>)
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 f8c9 	bl	8001e92 <HAL_CRC_Calculate>
 8000d00:	0003      	movs	r3, r0
 8000d02:	60fb      	str	r3, [r7, #12]

	return CRCtempC;
 8000d04:	68fb      	ldr	r3, [r7, #12]
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b004      	add	sp, #16
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	200001fc 	.word	0x200001fc

08000d14 <generateChecksum>:
 * 	@param	Channel-Anzahl
 * 	@ret	Array mit berechneten Quersummen
 */

uint16_t generateChecksum(uint8_t *tempC, uint8_t checksumNumber)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	1cfb      	adds	r3, r7, #3
 8000d20:	701a      	strb	r2, [r3, #0]
	uint16_t tmp = 0;
 8000d22:	200e      	movs	r0, #14
 8000d24:	183b      	adds	r3, r7, r0
 8000d26:	2200      	movs	r2, #0
 8000d28:	801a      	strh	r2, [r3, #0]

	if(checksumNumber == 0)
 8000d2a:	1cfb      	adds	r3, r7, #3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d114      	bne.n	8000d5c <generateChecksum+0x48>
	{
		tmp = tmp + tempC[0] + tempC[1] + tempC[2];
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	183b      	adds	r3, r7, r0
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3301      	adds	r3, #1
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	18d3      	adds	r3, r2, r3
 8000d4a:	b299      	uxth	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3302      	adds	r3, #2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	183b      	adds	r3, r7, r0
 8000d56:	188a      	adds	r2, r1, r2
 8000d58:	801a      	strh	r2, [r3, #0]
 8000d5a:	e030      	b.n	8000dbe <generateChecksum+0xaa>
	}
	else if(checksumNumber == 1)
 8000d5c:	1cfb      	adds	r3, r7, #3
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d116      	bne.n	8000d92 <generateChecksum+0x7e>
	{
		tmp = tmp + tempC[3] + tempC[4] + tempC[5];
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3303      	adds	r3, #3
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	200e      	movs	r0, #14
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	18d3      	adds	r3, r2, r3
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	18d3      	adds	r3, r2, r3
 8000d80:	b299      	uxth	r1, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3305      	adds	r3, #5
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	183b      	adds	r3, r7, r0
 8000d8c:	188a      	adds	r2, r1, r2
 8000d8e:	801a      	strh	r2, [r3, #0]
 8000d90:	e015      	b.n	8000dbe <generateChecksum+0xaa>
	}
	else
	{
		tmp = tmp + tempC[6] + tempC[7] + tempC[8];
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3306      	adds	r3, #6
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	200e      	movs	r0, #14
 8000d9c:	183b      	adds	r3, r7, r0
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	18d3      	adds	r3, r2, r3
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3307      	adds	r3, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	b299      	uxth	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3308      	adds	r3, #8
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	183b      	adds	r3, r7, r0
 8000dba:	188a      	adds	r2, r1, r2
 8000dbc:	801a      	strh	r2, [r3, #0]
	}

	return tmp;
 8000dbe:	230e      	movs	r3, #14
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	881b      	ldrh	r3, [r3, #0]
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b004      	add	sp, #16
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	619a      	str	r2, [r3, #24]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x44>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x44>)
 8000dec:	69da      	ldr	r2, [r3, #28]
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_MspInit+0x44>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	0549      	lsls	r1, r1, #21
 8000df4:	430a      	orrs	r2, r1
 8000df6:	61da      	str	r2, [r3, #28]
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_MspInit+0x44>)
 8000dfa:	69da      	ldr	r2, [r3, #28]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	055b      	lsls	r3, r3, #21
 8000e00:	4013      	ands	r3, r2
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b08b      	sub	sp, #44	; 0x2c
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	2414      	movs	r4, #20
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	0018      	movs	r0, r3
 8000e22:	2314      	movs	r3, #20
 8000e24:	001a      	movs	r2, r3
 8000e26:	2100      	movs	r1, #0
 8000e28:	f003 f834 	bl	8003e94 <memset>
  if(hadc->Instance==ADC1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a3c      	ldr	r2, [pc, #240]	; (8000f24 <HAL_ADC_MspInit+0x110>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d171      	bne.n	8000f1a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e36:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e38:	699a      	ldr	r2, [r3, #24]
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	0089      	lsls	r1, r1, #2
 8000e40:	430a      	orrs	r2, r1
 8000e42:	619a      	str	r2, [r3, #24]
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e46:	699a      	ldr	r2, [r3, #24]
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e54:	695a      	ldr	r2, [r3, #20]
 8000e56:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	0289      	lsls	r1, r1, #10
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e62:	695a      	ldr	r2, [r3, #20]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	029b      	lsls	r3, r3, #10
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e70:	695a      	ldr	r2, [r3, #20]
 8000e72:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	02c9      	lsls	r1, r1, #11
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_ADC_MspInit+0x114>)
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	02db      	lsls	r3, r3, #11
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	22ff      	movs	r2, #255	; 0xff
 8000e8e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2203      	movs	r2, #3
 8000e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	193a      	adds	r2, r7, r4
 8000e9e:	2390      	movs	r3, #144	; 0x90
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f001 faa3 	bl	80023f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2202      	movs	r2, #2
 8000eae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_ADC_MspInit+0x118>)
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	0010      	movs	r0, r2
 8000ec4:	f001 fa94 	bl	80023f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000eca:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <HAL_ADC_MspInit+0x120>)
 8000ecc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	0052      	lsls	r2, r2, #1
 8000ee6:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	0192      	lsls	r2, r2, #6
 8000efc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 f8dd 	bl	80020c0 <HAL_DMA_Init>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f0a:	f7ff fe47 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_ADC_MspInit+0x11c>)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b00b      	add	sp, #44	; 0x2c
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	40012400 	.word	0x40012400
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000400 	.word	0x48000400
 8000f30:	20000370 	.word	0x20000370
 8000f34:	40020008 	.word	0x40020008

08000f38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <HAL_CRC_MspInit+0x34>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10b      	bne.n	8000f62 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_CRC_MspInit+0x38>)
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_CRC_MspInit+0x38>)
 8000f50:	2140      	movs	r1, #64	; 0x40
 8000f52:	430a      	orrs	r2, r1
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_CRC_MspInit+0x38>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	2240      	movs	r2, #64	; 0x40
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b004      	add	sp, #16
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	40023000 	.word	0x40023000
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_TIM_Base_MspInit+0x60>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10e      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_TIM_Base_MspInit+0x64>)
 8000f88:	699a      	ldr	r2, [r3, #24]
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_TIM_Base_MspInit+0x64>)
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	0109      	lsls	r1, r1, #4
 8000f90:	430a      	orrs	r2, r1
 8000f92:	619a      	str	r2, [r3, #24]
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_TIM_Base_MspInit+0x64>)
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000fa2:	e012      	b.n	8000fca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_TIM_Base_MspInit+0x68>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10d      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_Base_MspInit+0x64>)
 8000fb0:	69da      	ldr	r2, [r3, #28]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_TIM_Base_MspInit+0x64>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	0049      	lsls	r1, r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	61da      	str	r2, [r3, #28]
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_TIM_Base_MspInit+0x64>)
 8000fbe:	69da      	ldr	r2, [r3, #28]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	40012c00 	.word	0x40012c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40002000 	.word	0x40002000

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b08b      	sub	sp, #44	; 0x2c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	2414      	movs	r4, #20
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	0018      	movs	r0, r3
 8000fee:	2314      	movs	r3, #20
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f002 ff4e 	bl	8003e94 <memset>
  if(huart->Instance==USART1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <HAL_UART_MspInit+0xe0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d159      	bne.n	80010b6 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001002:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <HAL_UART_MspInit+0xe4>)
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_UART_MspInit+0xe4>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	01c9      	lsls	r1, r1, #7
 800100c:	430a      	orrs	r2, r1
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <HAL_UART_MspInit+0xe4>)
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	01db      	lsls	r3, r3, #7
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <HAL_UART_MspInit+0xe4>)
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_UART_MspInit+0xe4>)
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	0289      	lsls	r1, r1, #10
 8001028:	430a      	orrs	r2, r1
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_UART_MspInit+0xe4>)
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	029b      	lsls	r3, r3, #10
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800103a:	193b      	adds	r3, r7, r4
 800103c:	22c0      	movs	r2, #192	; 0xc0
 800103e:	00d2      	lsls	r2, r2, #3
 8001040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	0021      	movs	r1, r4
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2202      	movs	r2, #2
 8001048:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2203      	movs	r2, #3
 8001054:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	187a      	adds	r2, r7, r1
 800105e:	2390      	movs	r3, #144	; 0x90
 8001060:	05db      	lsls	r3, r3, #23
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f001 f9c3 	bl	80023f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_UART_MspInit+0xec>)
 800106e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 8001072:	2210      	movs	r2, #16
 8001074:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 800109c:	0018      	movs	r0, r3
 800109e:	f001 f80f 	bl	80020c0 <HAL_DMA_Init>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80010a6:	f7ff fd79 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 80010ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_UART_MspInit+0xe8>)
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b00b      	add	sp, #44	; 0x2c
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	20000218 	.word	0x20000218
 80010cc:	4002001c 	.word	0x4002001c

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <NMI_Handler+0x4>

080010d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f9b8 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80010f8:	f000 fe78 	bl	8001dec <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <DMA1_Channel1_IRQHandler+0x14>)
 800110a:	0018      	movs	r0, r3
 800110c:	f001 f886 	bl	800221c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000370 	.word	0x20000370

0800111c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001122:	0018      	movs	r0, r3
 8001124:	f001 f87a 	bl	800221c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	20000218 	.word	0x20000218

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f002 fe6c 	bl	8003e40 <__errno>
 8001168:	0003      	movs	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	2301      	movs	r3, #1
 8001170:	425b      	negs	r3, r3
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	18d2      	adds	r2, r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <_sbrk+0x64>)
 8001184:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b006      	add	sp, #24
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20001800 	.word	0x20001800
 8001194:	00000400 	.word	0x00000400
 8001198:	200000f0 	.word	0x200000f0
 800119c:	20000408 	.word	0x20000408

080011a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <TxUART>:
 * 	@brief Senden der NTC-Nummer, der Temperatur, des zugehörigen CRCs & mehrerer "Stop"-Zeichen
 * 		***** NTC1 * 25°C * CRC1 ** NTC2 * 30°C * CRC2 ** ... **********
 */

void TxUART(uint8_t adcChannels, uint8_t *tempC, uint32_t *CRCtempC, uint16_t *checksum, uint32_t millis)
{
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b087      	sub	sp, #28
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	230f      	movs	r3, #15
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	1c02      	adds	r2, r0, #0
 80011bc:	701a      	strb	r2, [r3, #0]
	uint8_t ntcNumber = 0;
 80011be:	2313      	movs	r3, #19
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

	// "Header" -> sollte von auswertender Software erkannt werden
	blankTxUART(5);
 80011c6:	2005      	movs	r0, #5
 80011c8:	f000 f87e 	bl	80012c8 <blankTxUART>

	// "Timer-Information"
	millis = HAL_GetTick();
 80011cc:	f000 f95e 	bl	800148c <HAL_GetTick>
 80011d0:	0003      	movs	r3, r0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
	timeTxUART(millis);
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 f89c 	bl	8001314 <timeTxUART>
	blankTxUART(2);
 80011dc:	2002      	movs	r0, #2
 80011de:	f000 f873 	bl	80012c8 <blankTxUART>


	for(int j = 0; j < adcChannels; j++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e018      	b.n	800121a <TxUART+0x70>
	{
		ntcNumber = j;
 80011e8:	2413      	movs	r4, #19
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	701a      	strb	r2, [r3, #0]

		ntcNumberTxUART(ntcNumber);
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 f845 	bl	8001284 <ntcNumberTxUART>
		blankTxUART(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 f864 	bl	80012c8 <blankTxUART>
		singleTempTxUART(ntcNumber, tempC);
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	193b      	adds	r3, r7, r4
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	0011      	movs	r1, r2
 8001208:	0018      	movs	r0, r3
 800120a:	f000 f813 	bl	8001234 <singleTempTxUART>
		// Variante 2: Checksum bestehend aus je drei addierten Temperaturen senden
		// if((j == 2) || (j == 5) || (j == 8))
		// {
		//	ChecksumTxUART(ntcNumber, tempC, checksum);
		// }
		blankTxUART(2);
 800120e:	2002      	movs	r0, #2
 8001210:	f000 f85a 	bl	80012c8 <blankTxUART>
	for(int j = 0; j < adcChannels; j++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	230f      	movs	r3, #15
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	429a      	cmp	r2, r3
 8001224:	dbe0      	blt.n	80011e8 <TxUART+0x3e>
	}

	// "Tail" -> sollte von auswertender Software erkannt werden (Möglichkeit, eine Plausibilitätskontrolle durch Zählen der Temp.s oder so, einzubauen
	blankTxUART(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f000 f84e 	bl	80012c8 <blankTxUART>
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b007      	add	sp, #28
 8001232:	bd90      	pop	{r4, r7, pc}

08001234 <singleTempTxUART>:


void singleTempTxUART(uint8_t ntcNumber, uint8_t *tempC)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	0002      	movs	r2, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	701a      	strb	r2, [r3, #0]
	uint8_t bufferTempSize;
	char bufferTemp[3];

	bufferTempSize = sprintf(bufferTemp, "%d", tempC[ntcNumber]);
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	18d3      	adds	r3, r2, r3
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	001a      	movs	r2, r3
 800124e:	490b      	ldr	r1, [pc, #44]	; (800127c <singleTempTxUART+0x48>)
 8001250:	240c      	movs	r4, #12
 8001252:	193b      	adds	r3, r7, r4
 8001254:	0018      	movs	r0, r3
 8001256:	f002 fe25 	bl	8003ea4 <siprintf>
 800125a:	0002      	movs	r2, r0
 800125c:	210f      	movs	r1, #15
 800125e:	187b      	adds	r3, r7, r1
 8001260:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *) bufferTemp, bufferTempSize, 10);
 8001262:	187b      	adds	r3, r7, r1
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b29a      	uxth	r2, r3
 8001268:	1939      	adds	r1, r7, r4
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <singleTempTxUART+0x4c>)
 800126c:	230a      	movs	r3, #10
 800126e:	f002 fa83 	bl	8003778 <HAL_UART_Transmit>
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b005      	add	sp, #20
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	08004708 	.word	0x08004708
 8001280:	2000025c 	.word	0x2000025c

08001284 <ntcNumberTxUART>:
 * 	@brief	Übertragung der Nummer des zugehörigen NTCs
 * 	@param	Nummer des NTCs
 */

void ntcNumberTxUART(uint8_t ntcNumber)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	0002      	movs	r2, r0
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	701a      	strb	r2, [r3, #0]
	uint8_t bufferNtcNumberSize;
	char bufferNtcNumber[5];

	bufferNtcNumberSize = sprintf(bufferNtcNumber, "NTC%d", ntcNumber);
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	490a      	ldr	r1, [pc, #40]	; (80012c0 <ntcNumberTxUART+0x3c>)
 8001296:	2408      	movs	r4, #8
 8001298:	193b      	adds	r3, r7, r4
 800129a:	0018      	movs	r0, r3
 800129c:	f002 fe02 	bl	8003ea4 <siprintf>
 80012a0:	0002      	movs	r2, r0
 80012a2:	210f      	movs	r1, #15
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	701a      	strb	r2, [r3, #0]


	HAL_UART_Transmit(&huart1, (uint8_t *)bufferNtcNumber, bufferNtcNumberSize, 10);
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	1939      	adds	r1, r7, r4
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <ntcNumberTxUART+0x40>)
 80012b2:	230a      	movs	r3, #10
 80012b4:	f002 fa60 	bl	8003778 <HAL_UART_Transmit>
	// beim Empfang mittels Bitshift zerlegen & ablehnen, falls Bits vor der ersten 1 ungleich Null sind!
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b005      	add	sp, #20
 80012be:	bd90      	pop	{r4, r7, pc}
 80012c0:	0800470c 	.word	0x0800470c
 80012c4:	2000025c 	.word	0x2000025c

080012c8 <blankTxUART>:
 * 	@brief "Zwischenframe", Häufigkeit des Vorkommens ermöglicht Schluss auf Fortschritt der Nachricht
 * 	@param	Anzahl der Zwischenframes (Stern in ASCII-Codierung)
 */

void blankTxUART(uint8_t howmany)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	0002      	movs	r2, r0
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	701a      	strb	r2, [r3, #0]
	uint8_t divider[1] = "*";
 80012d4:	2308      	movs	r3, #8
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <blankTxUART+0x44>)
 80012da:	7812      	ldrb	r2, [r2, #0]
 80012dc:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < howmany; i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	e009      	b.n	80012f8 <blankTxUART+0x30>
	{
		HAL_UART_Transmit(&huart1, divider, sizeof(divider), 10);
 80012e4:	2308      	movs	r3, #8
 80012e6:	18f9      	adds	r1, r7, r3
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <blankTxUART+0x48>)
 80012ea:	230a      	movs	r3, #10
 80012ec:	2201      	movs	r2, #1
 80012ee:	f002 fa43 	bl	8003778 <HAL_UART_Transmit>
	for(int i = 0; i < howmany; i++)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3301      	adds	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbf0      	blt.n	80012e4 <blankTxUART+0x1c>
	}
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b004      	add	sp, #16
 800130a:	bd80      	pop	{r7, pc}
 800130c:	08004714 	.word	0x08004714
 8001310:	2000025c 	.word	0x2000025c

08001314 <timeTxUART>:
 * 	@param	Nummer des entsprechenden NTCs (ganzes Array wird übergeben)
 * 	@param	Array mit generierten CRC-Werten
 */

void timeTxUART(uint32_t millis)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint8_t bufferTimeSize;
	char bufferTime[8];

	bufferTimeSize = sprintf(bufferTime, "%ld", millis);
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	490b      	ldr	r1, [pc, #44]	; (800134c <timeTxUART+0x38>)
 8001320:	240c      	movs	r4, #12
 8001322:	193b      	adds	r3, r7, r4
 8001324:	0018      	movs	r0, r3
 8001326:	f002 fdbd 	bl	8003ea4 <siprintf>
 800132a:	0002      	movs	r2, r0
 800132c:	2117      	movs	r1, #23
 800132e:	187b      	adds	r3, r7, r1
 8001330:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *)bufferTime, bufferTimeSize, 10);
 8001332:	187b      	adds	r3, r7, r1
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b29a      	uxth	r2, r3
 8001338:	1939      	adds	r1, r7, r4
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <timeTxUART+0x3c>)
 800133c:	230a      	movs	r3, #10
 800133e:	f002 fa1b 	bl	8003778 <HAL_UART_Transmit>
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b007      	add	sp, #28
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	08004718 	.word	0x08004718
 8001350:	2000025c 	.word	0x2000025c

08001354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001356:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <LoopForever+0x6>)
    LDR R1, [R0]
 800135a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800135c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <LoopForever+0xa>)
    CMP R1, R2
 8001360:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001362:	d105      	bne.n	8001370 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001364:	4812      	ldr	r0, [pc, #72]	; (80013b0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001366:	4913      	ldr	r1, [pc, #76]	; (80013b4 <LoopForever+0x12>)
    STR R1, [R0]
 8001368:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800136a:	4813      	ldr	r0, [pc, #76]	; (80013b8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800136c:	4913      	ldr	r1, [pc, #76]	; (80013bc <LoopForever+0x1a>)
    STR R1, [R0]
 800136e:	6001      	str	r1, [r0, #0]

08001370 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001372:	4914      	ldr	r1, [pc, #80]	; (80013c4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <LoopForever+0x26>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a11      	ldr	r2, [pc, #68]	; (80013cc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001388:	4c11      	ldr	r4, [pc, #68]	; (80013d0 <LoopForever+0x2e>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001396:	f7ff ff03 	bl	80011a0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800139a:	f002 fd57 	bl	8003e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7ff f97d 	bl	800069c <main>

080013a2 <LoopForever>:

LoopForever:
    b LoopForever
 80013a2:	e7fe      	b.n	80013a2 <LoopForever>
  ldr   r0, =_estack
 80013a4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80013a8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80013ac:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80013b0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80013b4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80013b8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80013bc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80013c8:	080048cc 	.word	0x080048cc
  ldr r2, =_sbss
 80013cc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80013d0:	20000408 	.word	0x20000408

080013d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_IRQHandler>
	...

080013d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_Init+0x24>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_Init+0x24>)
 80013e2:	2110      	movs	r1, #16
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 f809 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ee:	f7ff fced 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	40022000 	.word	0x40022000

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_InitTick+0x5c>)
 800140a:	681c      	ldr	r4, [r3, #0]
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_InitTick+0x60>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	0019      	movs	r1, r3
 8001412:	23fa      	movs	r3, #250	; 0xfa
 8001414:	0098      	lsls	r0, r3, #2
 8001416:	f7fe fe81 	bl	800011c <__udivsi3>
 800141a:	0003      	movs	r3, r0
 800141c:	0019      	movs	r1, r3
 800141e:	0020      	movs	r0, r4
 8001420:	f7fe fe7c 	bl	800011c <__udivsi3>
 8001424:	0003      	movs	r3, r0
 8001426:	0018      	movs	r0, r3
 8001428:	f000 fcd3 	bl	8001dd2 <HAL_SYSTICK_Config>
 800142c:	1e03      	subs	r3, r0, #0
 800142e:	d001      	beq.n	8001434 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e00f      	b.n	8001454 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d80b      	bhi.n	8001452 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	2301      	movs	r3, #1
 800143e:	425b      	negs	r3, r3
 8001440:	2200      	movs	r2, #0
 8001442:	0018      	movs	r0, r3
 8001444:	f000 fca0 	bl	8001d88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_InitTick+0x64>)
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b003      	add	sp, #12
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000014 	.word	0x20000014
 8001460:	2000001c 	.word	0x2000001c
 8001464:	20000018 	.word	0x20000018

08001468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x1c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	001a      	movs	r2, r3
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_IncTick+0x20>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	18d2      	adds	r2, r2, r3
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_IncTick+0x20>)
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	2000001c 	.word	0x2000001c
 8001488:	200003f4 	.word	0x200003f4

0800148c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <HAL_GetTick+0x10>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	200003f4 	.word	0x200003f4

080014a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a8:	230f      	movs	r3, #15
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e125      	b.n	800170a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10a      	bne.n	80014dc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2234      	movs	r2, #52	; 0x34
 80014d0:	2100      	movs	r1, #0
 80014d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7ff fc9c 	bl	8000e14 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e0:	2210      	movs	r2, #16
 80014e2:	4013      	ands	r3, r2
 80014e4:	d000      	beq.n	80014e8 <HAL_ADC_Init+0x48>
 80014e6:	e103      	b.n	80016f0 <HAL_ADC_Init+0x250>
 80014e8:	230f      	movs	r3, #15
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d000      	beq.n	80014f4 <HAL_ADC_Init+0x54>
 80014f2:	e0fd      	b.n	80016f0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2204      	movs	r2, #4
 80014fc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80014fe:	d000      	beq.n	8001502 <HAL_ADC_Init+0x62>
 8001500:	e0f6      	b.n	80016f0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001506:	4a83      	ldr	r2, [pc, #524]	; (8001714 <HAL_ADC_Init+0x274>)
 8001508:	4013      	ands	r3, r2
 800150a:	2202      	movs	r2, #2
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2203      	movs	r2, #3
 800151a:	4013      	ands	r3, r2
 800151c:	2b01      	cmp	r3, #1
 800151e:	d112      	bne.n	8001546 <HAL_ADC_Init+0xa6>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2201      	movs	r2, #1
 8001528:	4013      	ands	r3, r2
 800152a:	2b01      	cmp	r3, #1
 800152c:	d009      	beq.n	8001542 <HAL_ADC_Init+0xa2>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	401a      	ands	r2, r3
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	429a      	cmp	r2, r3
 8001540:	d101      	bne.n	8001546 <HAL_ADC_Init+0xa6>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_ADC_Init+0xa8>
 8001546:	2300      	movs	r3, #0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d116      	bne.n	800157a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2218      	movs	r2, #24
 8001554:	4393      	bics	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	0899      	lsrs	r1, r3, #2
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4964      	ldr	r1, [pc, #400]	; (8001718 <HAL_ADC_Init+0x278>)
 8001586:	400a      	ands	r2, r1
 8001588:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7e1b      	ldrb	r3, [r3, #24]
 800158e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e5b      	ldrb	r3, [r3, #25]
 8001594:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001596:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7e9b      	ldrb	r3, [r3, #26]
 800159c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800159e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d002      	beq.n	80015ae <HAL_ADC_Init+0x10e>
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	015b      	lsls	r3, r3, #5
 80015ac:	e000      	b.n	80015b0 <HAL_ADC_Init+0x110>
 80015ae:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015b0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015b6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_Init+0x124>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e000      	b.n	80015c6 <HAL_ADC_Init+0x126>
 80015c4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80015c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2124      	movs	r1, #36	; 0x24
 80015cc:	5c5b      	ldrb	r3, [r3, r1]
 80015ce:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015d0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7edb      	ldrb	r3, [r3, #27]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d115      	bne.n	800160c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e9b      	ldrb	r3, [r3, #26]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d105      	bne.n	80015f4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	0252      	lsls	r2, r2, #9
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	e00b      	b.n	800160c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f8:	2220      	movs	r2, #32
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001604:	2201      	movs	r2, #1
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69da      	ldr	r2, [r3, #28]
 8001610:	23c2      	movs	r3, #194	; 0xc2
 8001612:	33ff      	adds	r3, #255	; 0xff
 8001614:	429a      	cmp	r2, r3
 8001616:	d007      	beq.n	8001628 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001620:	4313      	orrs	r3, r2
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	4313      	orrs	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68d9      	ldr	r1, [r3, #12]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	430a      	orrs	r2, r1
 8001636:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	055b      	lsls	r3, r3, #21
 8001640:	429a      	cmp	r2, r3
 8001642:	d01b      	beq.n	800167c <HAL_ADC_Init+0x1dc>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	2b01      	cmp	r3, #1
 800164a:	d017      	beq.n	800167c <HAL_ADC_Init+0x1dc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	2b02      	cmp	r3, #2
 8001652:	d013      	beq.n	800167c <HAL_ADC_Init+0x1dc>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	2b03      	cmp	r3, #3
 800165a:	d00f      	beq.n	800167c <HAL_ADC_Init+0x1dc>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	2b04      	cmp	r3, #4
 8001662:	d00b      	beq.n	800167c <HAL_ADC_Init+0x1dc>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	2b05      	cmp	r3, #5
 800166a:	d007      	beq.n	800167c <HAL_ADC_Init+0x1dc>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	2b06      	cmp	r3, #6
 8001672:	d003      	beq.n	800167c <HAL_ADC_Init+0x1dc>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	2b07      	cmp	r3, #7
 800167a:	d112      	bne.n	80016a2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2107      	movs	r1, #7
 8001688:	438a      	bics	r2, r1
 800168a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6959      	ldr	r1, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	2207      	movs	r2, #7
 8001698:	401a      	ands	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4a1c      	ldr	r2, [pc, #112]	; (800171c <HAL_ADC_Init+0x27c>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d10b      	bne.n	80016ca <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016bc:	2203      	movs	r2, #3
 80016be:	4393      	bics	r3, r2
 80016c0:	2201      	movs	r2, #1
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016c8:	e01c      	b.n	8001704 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	2212      	movs	r2, #18
 80016d0:	4393      	bics	r3, r2
 80016d2:	2210      	movs	r2, #16
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	2201      	movs	r2, #1
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80016e6:	230f      	movs	r3, #15
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016ee:	e009      	b.n	8001704 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	2210      	movs	r2, #16
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80016fc:	230f      	movs	r3, #15
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001704:	230f      	movs	r3, #15
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	781b      	ldrb	r3, [r3, #0]
}
 800170a:	0018      	movs	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	b004      	add	sp, #16
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	fffffefd 	.word	0xfffffefd
 8001718:	fffe0219 	.word	0xfffe0219
 800171c:	833fffe7 	.word	0x833fffe7

08001720 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172c:	2317      	movs	r3, #23
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2204      	movs	r2, #4
 800173c:	4013      	ands	r3, r2
 800173e:	d15e      	bne.n	80017fe <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2234      	movs	r2, #52	; 0x34
 8001744:	5c9b      	ldrb	r3, [r3, r2]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_ADC_Start_DMA+0x2e>
 800174a:	2302      	movs	r3, #2
 800174c:	e05e      	b.n	800180c <HAL_ADC_Start_DMA+0xec>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2234      	movs	r2, #52	; 0x34
 8001752:	2101      	movs	r1, #1
 8001754:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	7e5b      	ldrb	r3, [r3, #25]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d007      	beq.n	800176e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800175e:	2317      	movs	r3, #23
 8001760:	18fc      	adds	r4, r7, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	0018      	movs	r0, r3
 8001766:	f000 f963 	bl	8001a30 <ADC_Enable>
 800176a:	0003      	movs	r3, r0
 800176c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800176e:	2317      	movs	r3, #23
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d146      	bne.n	8001806 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177c:	4a25      	ldr	r2, [pc, #148]	; (8001814 <HAL_ADC_Start_DMA+0xf4>)
 800177e:	4013      	ands	r3, r2
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	0052      	lsls	r2, r2, #1
 8001784:	431a      	orrs	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2234      	movs	r2, #52	; 0x34
 8001794:	2100      	movs	r1, #0
 8001796:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_ADC_Start_DMA+0xf8>)
 800179e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_ADC_Start_DMA+0xfc>)
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <HAL_ADC_Start_DMA+0x100>)
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	221c      	movs	r2, #28
 80017b6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2110      	movs	r1, #16
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2101      	movs	r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3340      	adds	r3, #64	; 0x40
 80017e2:	0019      	movs	r1, r3
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f000 fcb2 	bl	8002150 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2104      	movs	r1, #4
 80017f8:	430a      	orrs	r2, r1
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	e003      	b.n	8001806 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017fe:	2317      	movs	r3, #23
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001806:	2317      	movs	r3, #23
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	781b      	ldrb	r3, [r3, #0]
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b007      	add	sp, #28
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	fffff0fe 	.word	0xfffff0fe
 8001818:	08001b29 	.word	0x08001b29
 800181c:	08001bdd 	.word	0x08001bdd
 8001820:	08001bfb 	.word	0x08001bfb

08001824 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b002      	add	sp, #8
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184e:	230f      	movs	r3, #15
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	055b      	lsls	r3, r3, #21
 8001862:	429a      	cmp	r2, r3
 8001864:	d011      	beq.n	800188a <HAL_ADC_ConfigChannel+0x46>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	2b01      	cmp	r3, #1
 800186c:	d00d      	beq.n	800188a <HAL_ADC_ConfigChannel+0x46>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	2b02      	cmp	r3, #2
 8001874:	d009      	beq.n	800188a <HAL_ADC_ConfigChannel+0x46>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	2b03      	cmp	r3, #3
 800187c:	d005      	beq.n	800188a <HAL_ADC_ConfigChannel+0x46>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	2b04      	cmp	r3, #4
 8001884:	d001      	beq.n	800188a <HAL_ADC_ConfigChannel+0x46>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2234      	movs	r2, #52	; 0x34
 800188e:	5c9b      	ldrb	r3, [r3, r2]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x54>
 8001894:	2302      	movs	r3, #2
 8001896:	e0bb      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x1cc>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2234      	movs	r2, #52	; 0x34
 800189c:	2101      	movs	r1, #1
 800189e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2204      	movs	r2, #4
 80018a8:	4013      	ands	r3, r2
 80018aa:	d000      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x6a>
 80018ac:	e09f      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4a59      	ldr	r2, [pc, #356]	; (8001a18 <HAL_ADC_ConfigChannel+0x1d4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d100      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x76>
 80018b8:	e077      	b.n	80019aa <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2201      	movs	r2, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	055b      	lsls	r3, r3, #21
 80018d8:	429a      	cmp	r2, r3
 80018da:	d037      	beq.n	800194c <HAL_ADC_ConfigChannel+0x108>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d033      	beq.n	800194c <HAL_ADC_ConfigChannel+0x108>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d02f      	beq.n	800194c <HAL_ADC_ConfigChannel+0x108>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d02b      	beq.n	800194c <HAL_ADC_ConfigChannel+0x108>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d027      	beq.n	800194c <HAL_ADC_ConfigChannel+0x108>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	2b05      	cmp	r3, #5
 8001902:	d023      	beq.n	800194c <HAL_ADC_ConfigChannel+0x108>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	2b06      	cmp	r3, #6
 800190a:	d01f      	beq.n	800194c <HAL_ADC_ConfigChannel+0x108>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b07      	cmp	r3, #7
 8001912:	d01b      	beq.n	800194c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	2107      	movs	r1, #7
 8001920:	400b      	ands	r3, r1
 8001922:	429a      	cmp	r2, r3
 8001924:	d012      	beq.n	800194c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2107      	movs	r1, #7
 8001932:	438a      	bics	r2, r1
 8001934:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6959      	ldr	r1, [r3, #20]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2207      	movs	r2, #7
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b10      	cmp	r3, #16
 8001952:	d003      	beq.n	800195c <HAL_ADC_ConfigChannel+0x118>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b11      	cmp	r3, #17
 800195a:	d152      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_ADC_ConfigChannel+0x1d8>)
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b10      	cmp	r3, #16
 8001966:	d102      	bne.n	800196e <HAL_ADC_ConfigChannel+0x12a>
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	e001      	b.n	8001972 <HAL_ADC_ConfigChannel+0x12e>
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	03db      	lsls	r3, r3, #15
 8001972:	4a2a      	ldr	r2, [pc, #168]	; (8001a1c <HAL_ADC_ConfigChannel+0x1d8>)
 8001974:	430b      	orrs	r3, r1
 8001976:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b10      	cmp	r3, #16
 800197e:	d140      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_ADC_ConfigChannel+0x1dc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4927      	ldr	r1, [pc, #156]	; (8001a24 <HAL_ADC_ConfigChannel+0x1e0>)
 8001986:	0018      	movs	r0, r3
 8001988:	f7fe fbc8 	bl	800011c <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	189b      	adds	r3, r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800199a:	e002      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f9      	bne.n	800199c <HAL_ADC_ConfigChannel+0x158>
 80019a8:	e02b      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	4099      	lsls	r1, r3
 80019b8:	000b      	movs	r3, r1
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	400a      	ands	r2, r1
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	d003      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x190>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d116      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_ADC_ConfigChannel+0x1d8>)
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b10      	cmp	r3, #16
 80019de:	d101      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1a0>
 80019e0:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_ADC_ConfigChannel+0x1e4>)
 80019e2:	e000      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x1a2>
 80019e4:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <HAL_ADC_ConfigChannel+0x1e8>)
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_ADC_ConfigChannel+0x1d8>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e009      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	2220      	movs	r2, #32
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80019fa:	230f      	movs	r3, #15
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2234      	movs	r2, #52	; 0x34
 8001a06:	2100      	movs	r1, #0
 8001a08:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a0a:	230f      	movs	r3, #15
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b004      	add	sp, #16
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	00001001 	.word	0x00001001
 8001a1c:	40012708 	.word	0x40012708
 8001a20:	20000014 	.word	0x20000014
 8001a24:	000f4240 	.word	0x000f4240
 8001a28:	ff7fffff 	.word	0xff7fffff
 8001a2c:	ffbfffff 	.word	0xffbfffff

08001a30 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2203      	movs	r2, #3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d112      	bne.n	8001a74 <ADC_Enable+0x44>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d009      	beq.n	8001a70 <ADC_Enable+0x40>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	401a      	ands	r2, r3
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d101      	bne.n	8001a74 <ADC_Enable+0x44>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <ADC_Enable+0x46>
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d14b      	bne.n	8001b12 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <ADC_Enable+0xec>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a96:	2201      	movs	r2, #1
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e038      	b.n	8001b14 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2101      	movs	r1, #1
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <ADC_Enable+0xf0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	491b      	ldr	r1, [pc, #108]	; (8001b24 <ADC_Enable+0xf4>)
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7fe fb2f 	bl	800011c <__udivsi3>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ac2:	e002      	b.n	8001aca <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f9      	bne.n	8001ac4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff fcdc 	bl	800148c <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ad8:	e014      	b.n	8001b04 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ada:	f7ff fcd7 	bl	800148c <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d90d      	bls.n	8001b04 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	2210      	movs	r2, #16
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	2201      	movs	r2, #1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e007      	b.n	8001b14 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d1e3      	bne.n	8001ada <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b004      	add	sp, #16
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	80000017 	.word	0x80000017
 8001b20:	20000014 	.word	0x20000014
 8001b24:	000f4240 	.word	0x000f4240

08001b28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3a:	2250      	movs	r2, #80	; 0x50
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d140      	bne.n	8001bc2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	23c0      	movs	r3, #192	; 0xc0
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d12d      	bne.n	8001bb8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d129      	bne.n	8001bb8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d122      	bne.n	8001bb8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d110      	bne.n	8001ba0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	210c      	movs	r1, #12
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <ADC_DMAConvCplt+0xb0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	2201      	movs	r2, #1
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b9e:	e00b      	b.n	8001bb8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f7fe fc24 	bl	8000408 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001bc0:	e005      	b.n	8001bce <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	0010      	movs	r0, r2
 8001bcc:	4798      	blx	r3
}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b004      	add	sp, #16
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	fffffefe 	.word	0xfffffefe

08001bdc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff fe19 	bl	8001824 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b004      	add	sp, #16
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	2240      	movs	r2, #64	; 0x40
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c18:	2204      	movs	r2, #4
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7ff fe06 	bl	8001834 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b004      	add	sp, #16
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	0002      	movs	r2, r0
 8001c38:	1dfb      	adds	r3, r7, #7
 8001c3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b7f      	cmp	r3, #127	; 0x7f
 8001c42:	d809      	bhi.n	8001c58 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c44:	1dfb      	adds	r3, r7, #7
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	001a      	movs	r2, r3
 8001c4a:	231f      	movs	r3, #31
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <__NVIC_EnableIRQ+0x30>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	4091      	lsls	r1, r2
 8001c54:	000a      	movs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
  }
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b7f      	cmp	r3, #127	; 0x7f
 8001c78:	d828      	bhi.n	8001ccc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c7a:	4a2f      	ldr	r2, [pc, #188]	; (8001d38 <__NVIC_SetPriority+0xd4>)
 8001c7c:	1dfb      	adds	r3, r7, #7
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	33c0      	adds	r3, #192	; 0xc0
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	589b      	ldr	r3, [r3, r2]
 8001c8a:	1dfa      	adds	r2, r7, #7
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	0011      	movs	r1, r2
 8001c90:	2203      	movs	r2, #3
 8001c92:	400a      	ands	r2, r1
 8001c94:	00d2      	lsls	r2, r2, #3
 8001c96:	21ff      	movs	r1, #255	; 0xff
 8001c98:	4091      	lsls	r1, r2
 8001c9a:	000a      	movs	r2, r1
 8001c9c:	43d2      	mvns	r2, r2
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	22ff      	movs	r2, #255	; 0xff
 8001ca8:	401a      	ands	r2, r3
 8001caa:	1dfb      	adds	r3, r7, #7
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	4003      	ands	r3, r0
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb8:	481f      	ldr	r0, [pc, #124]	; (8001d38 <__NVIC_SetPriority+0xd4>)
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	33c0      	adds	r3, #192	; 0xc0
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cca:	e031      	b.n	8001d30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <__NVIC_SetPriority+0xd8>)
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	3b08      	subs	r3, #8
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3306      	adds	r3, #6
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	1dfa      	adds	r2, r7, #7
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	0011      	movs	r1, r2
 8001cec:	2203      	movs	r2, #3
 8001cee:	400a      	ands	r2, r1
 8001cf0:	00d2      	lsls	r2, r2, #3
 8001cf2:	21ff      	movs	r1, #255	; 0xff
 8001cf4:	4091      	lsls	r1, r2
 8001cf6:	000a      	movs	r2, r1
 8001cf8:	43d2      	mvns	r2, r2
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	019b      	lsls	r3, r3, #6
 8001d02:	22ff      	movs	r2, #255	; 0xff
 8001d04:	401a      	ands	r2, r3
 8001d06:	1dfb      	adds	r3, r7, #7
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	4003      	ands	r3, r0
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d14:	4809      	ldr	r0, [pc, #36]	; (8001d3c <__NVIC_SetPriority+0xd8>)
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	4023      	ands	r3, r4
 8001d20:	3b08      	subs	r3, #8
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	430a      	orrs	r2, r1
 8001d26:	3306      	adds	r3, #6
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	18c3      	adds	r3, r0, r3
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b003      	add	sp, #12
 8001d36:	bd90      	pop	{r4, r7, pc}
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	045b      	lsls	r3, r3, #17
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d301      	bcc.n	8001d58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d54:	2301      	movs	r3, #1
 8001d56:	e010      	b.n	8001d7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <SysTick_Config+0x44>)
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d60:	2301      	movs	r3, #1
 8001d62:	425b      	negs	r3, r3
 8001d64:	2103      	movs	r1, #3
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff ff7c 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x44>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x44>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b002      	add	sp, #8
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	210f      	movs	r1, #15
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	1c02      	adds	r2, r0, #0
 8001d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	0011      	movs	r1, r2
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff ff5d 	bl	8001c64 <__NVIC_SetPriority>
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b004      	add	sp, #16
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	0002      	movs	r2, r0
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7ff ff33 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff ffaf 	bl	8001d40 <SysTick_Config>
 8001de2:	0003      	movs	r3, r0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b002      	add	sp, #8
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001df0:	f000 f803 	bl	8001dfa <HAL_SYSTICK_Callback>
}
 8001df4:	46c0      	nop			; (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e039      	b.n	8001e8a <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7d5b      	ldrb	r3, [r3, #21]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d106      	bne.n	8001e2e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff f885 	bl	8000f38 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	791b      	ldrb	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	4252      	negs	r2, r2
 8001e44:	611a      	str	r2, [r3, #16]
 8001e46:	e004      	b.n	8001e52 <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6892      	ldr	r2, [r2, #8]
 8001e50:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2260      	movs	r2, #96	; 0x60
 8001e5a:	4393      	bics	r3, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	4393      	bics	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	755a      	strb	r2, [r3, #21]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d005      	beq.n	8001ecc <HAL_CRC_Calculate+0x3a>
 8001ec0:	d82d      	bhi.n	8001f1e <HAL_CRC_Calculate+0x8c>
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d019      	beq.n	8001efa <HAL_CRC_Calculate+0x68>
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d020      	beq.n	8001f0c <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001eca:	e028      	b.n	8001f1e <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e00a      	b.n	8001ee8 <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	18d2      	adds	r2, r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d3f0      	bcc.n	8001ed2 <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	613b      	str	r3, [r7, #16]
      break;
 8001ef8:	e012      	b.n	8001f20 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f815 	bl	8001f30 <CRC_Handle_8>
 8001f06:	0003      	movs	r3, r0
 8001f08:	613b      	str	r3, [r7, #16]
      break;
 8001f0a:	e009      	b.n	8001f20 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f89d 	bl	8002052 <CRC_Handle_16>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	613b      	str	r3, [r7, #16]
      break;
 8001f1c:	e000      	b.n	8001f20 <HAL_CRC_Calculate+0x8e>
      break;
 8001f1e:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	755a      	strb	r2, [r3, #21]

  /* Return the CRC computed value */
  return temp;
 8001f26:	693b      	ldr	r3, [r7, #16]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b006      	add	sp, #24
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	e023      	b.n	8001f8a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	3301      	adds	r3, #1
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	18cb      	adds	r3, r1, r3
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001f5c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	18cb      	adds	r3, r1, r3
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001f6c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	3303      	adds	r3, #3
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	18cb      	adds	r3, r1, r3
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001f80:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3301      	adds	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3d6      	bcc.n	8001f42 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2203      	movs	r2, #3
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d053      	beq.n	8002044 <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	18d2      	adds	r2, r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d119      	bne.n	8001ff4 <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	18d3      	adds	r3, r2, r3
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	18cb      	adds	r3, r1, r3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	211a      	movs	r1, #26
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	187a      	adds	r2, r7, r1
 8001ff0:	8812      	ldrh	r2, [r2, #0]
 8001ff2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d122      	bne.n	8002044 <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	18d3      	adds	r3, r2, r3
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21a      	sxth	r2, r3
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	3301      	adds	r3, #1
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	18cb      	adds	r3, r1, r3
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b21b      	sxth	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b21a      	sxth	r2, r3
 800201e:	211a      	movs	r1, #26
 8002020:	187b      	adds	r3, r7, r1
 8002022:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	187a      	adds	r2, r7, r1
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	18d2      	adds	r2, r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b008      	add	sp, #32
 8002050:	bd80      	pop	{r7, pc}

08002052 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e013      	b.n	800208c <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	18d3      	adds	r3, r2, r3
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	18cb      	adds	r3, r1, r3
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	0019      	movs	r1, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	429a      	cmp	r2, r3
 8002094:	d3e6      	bcc.n	8002064 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	4013      	ands	r3, r2
 800209c:	d009      	beq.n	80020b2 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b006      	add	sp, #24
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e036      	b.n	8002144 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2221      	movs	r2, #33	; 0x21
 80020da:	2102      	movs	r1, #2
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_DMA_Init+0x8c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0018      	movs	r0, r3
 8002128:	f000 f946 	bl	80023b8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2221      	movs	r2, #33	; 0x21
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}  
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b004      	add	sp, #16
 800214a:	bd80      	pop	{r7, pc}
 800214c:	ffffc00f 	.word	0xffffc00f

08002150 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	5c9b      	ldrb	r3, [r3, r2]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_DMA_Start_IT+0x24>
 8002170:	2302      	movs	r3, #2
 8002172:	e04f      	b.n	8002214 <HAL_DMA_Start_IT+0xc4>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	2101      	movs	r1, #1
 800217a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2221      	movs	r2, #33	; 0x21
 8002180:	5c9b      	ldrb	r3, [r3, r2]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d13a      	bne.n	80021fe <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2221      	movs	r2, #33	; 0x21
 800218c:	2102      	movs	r1, #2
 800218e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	438a      	bics	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f8d7 	bl	8002360 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	210e      	movs	r1, #14
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e00f      	b.n	80021ec <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	210a      	movs	r1, #10
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2104      	movs	r1, #4
 80021e8:	438a      	bics	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2101      	movs	r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e007      	b.n	800220e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002206:	2317      	movs	r3, #23
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	2202      	movs	r2, #2
 800220c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800220e:	2317      	movs	r3, #23
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	781b      	ldrb	r3, [r3, #0]
} 
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b006      	add	sp, #24
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	2204      	movs	r2, #4
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	d024      	beq.n	800228e <HAL_DMA_IRQHandler+0x72>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2204      	movs	r2, #4
 8002248:	4013      	ands	r3, r2
 800224a:	d020      	beq.n	800228e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	4013      	ands	r3, r2
 8002256:	d107      	bne.n	8002268 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2104      	movs	r1, #4
 8002264:	438a      	bics	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	2104      	movs	r1, #4
 8002272:	4091      	lsls	r1, r2
 8002274:	000a      	movs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	2b00      	cmp	r3, #0
 800227e:	d100      	bne.n	8002282 <HAL_DMA_IRQHandler+0x66>
 8002280:	e06a      	b.n	8002358 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	0010      	movs	r0, r2
 800228a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800228c:	e064      	b.n	8002358 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2202      	movs	r2, #2
 8002294:	409a      	lsls	r2, r3
 8002296:	0013      	movs	r3, r2
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	d02b      	beq.n	80022f6 <HAL_DMA_IRQHandler+0xda>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	d027      	beq.n	80022f6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2220      	movs	r2, #32
 80022ae:	4013      	ands	r3, r2
 80022b0:	d10b      	bne.n	80022ca <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	210a      	movs	r1, #10
 80022be:	438a      	bics	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2221      	movs	r2, #33	; 0x21
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	2102      	movs	r1, #2
 80022d4:	4091      	lsls	r1, r2
 80022d6:	000a      	movs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d036      	beq.n	8002358 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	0010      	movs	r0, r2
 80022f2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80022f4:	e030      	b.n	8002358 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	2208      	movs	r2, #8
 80022fc:	409a      	lsls	r2, r3
 80022fe:	0013      	movs	r3, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	d028      	beq.n	8002358 <HAL_DMA_IRQHandler+0x13c>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2208      	movs	r2, #8
 800230a:	4013      	ands	r3, r2
 800230c:	d024      	beq.n	8002358 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	210e      	movs	r1, #14
 800231a:	438a      	bics	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	2101      	movs	r1, #1
 8002328:	4091      	lsls	r1, r2
 800232a:	000a      	movs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2221      	movs	r2, #33	; 0x21
 8002338:	2101      	movs	r1, #1
 800233a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2220      	movs	r2, #32
 8002340:	2100      	movs	r1, #0
 8002342:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	0010      	movs	r0, r2
 8002354:	4798      	blx	r3
    }
   }
}  
 8002356:	e7ff      	b.n	8002358 <HAL_DMA_IRQHandler+0x13c>
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}

08002360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2101      	movs	r1, #1
 8002378:	4091      	lsls	r1, r2
 800237a:	000a      	movs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b10      	cmp	r3, #16
 800238c:	d108      	bne.n	80023a0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800239e:	e007      	b.n	80023b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b004      	add	sp, #16
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <DMA_CalcBaseAndBitshift+0x30>)
 80023c6:	4694      	mov	ip, r2
 80023c8:	4463      	add	r3, ip
 80023ca:	2114      	movs	r1, #20
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7fd fea5 	bl	800011c <__udivsi3>
 80023d2:	0003      	movs	r3, r0
 80023d4:	009a      	lsls	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a03      	ldr	r2, [pc, #12]	; (80023ec <DMA_CalcBaseAndBitshift+0x34>)
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b002      	add	sp, #8
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	bffdfff8 	.word	0xbffdfff8
 80023ec:	40020000 	.word	0x40020000

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	e14f      	b.n	80026a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4091      	lsls	r1, r2
 800240a:	000a      	movs	r2, r1
 800240c:	4013      	ands	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d100      	bne.n	8002418 <HAL_GPIO_Init+0x28>
 8002416:	e140      	b.n	800269a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d00b      	beq.n	8002438 <HAL_GPIO_Init+0x48>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d007      	beq.n	8002438 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800242c:	2b11      	cmp	r3, #17
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b12      	cmp	r3, #18
 8002436:	d130      	bne.n	800249a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	409a      	lsls	r2, r3
 8002446:	0013      	movs	r3, r2
 8002448:	43da      	mvns	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	409a      	lsls	r2, r3
 800245a:	0013      	movs	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246e:	2201      	movs	r2, #1
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
 8002474:	0013      	movs	r3, r2
 8002476:	43da      	mvns	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	2201      	movs	r2, #1
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
 800248c:	0013      	movs	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0013      	movs	r3, r2
 80024aa:	43da      	mvns	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	409a      	lsls	r2, r3
 80024bc:	0013      	movs	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0xea>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b12      	cmp	r3, #18
 80024d8:	d123      	bne.n	8002522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	0092      	lsls	r2, r2, #2
 80024e4:	58d3      	ldr	r3, [r2, r3]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2207      	movs	r2, #7
 80024ec:	4013      	ands	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	409a      	lsls	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	43da      	mvns	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2107      	movs	r1, #7
 8002506:	400b      	ands	r3, r1
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	409a      	lsls	r2, r3
 800250c:	0013      	movs	r3, r2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	6939      	ldr	r1, [r7, #16]
 8002520:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	409a      	lsls	r2, r3
 8002530:	0013      	movs	r3, r2
 8002532:	43da      	mvns	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2203      	movs	r2, #3
 8002540:	401a      	ands	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	409a      	lsls	r2, r3
 8002548:	0013      	movs	r3, r2
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	055b      	lsls	r3, r3, #21
 800255e:	4013      	ands	r3, r2
 8002560:	d100      	bne.n	8002564 <HAL_GPIO_Init+0x174>
 8002562:	e09a      	b.n	800269a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002564:	4b54      	ldr	r3, [pc, #336]	; (80026b8 <HAL_GPIO_Init+0x2c8>)
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_GPIO_Init+0x2c8>)
 800256a:	2101      	movs	r1, #1
 800256c:	430a      	orrs	r2, r1
 800256e:	619a      	str	r2, [r3, #24]
 8002570:	4b51      	ldr	r3, [pc, #324]	; (80026b8 <HAL_GPIO_Init+0x2c8>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800257c:	4a4f      	ldr	r2, [pc, #316]	; (80026bc <HAL_GPIO_Init+0x2cc>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	589b      	ldr	r3, [r3, r2]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2203      	movs	r2, #3
 800258e:	4013      	ands	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	409a      	lsls	r2, r3
 8002596:	0013      	movs	r3, r2
 8002598:	43da      	mvns	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	2390      	movs	r3, #144	; 0x90
 80025a4:	05db      	lsls	r3, r3, #23
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x1e2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a44      	ldr	r2, [pc, #272]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x1de>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a43      	ldr	r2, [pc, #268]	; (80026c4 <HAL_GPIO_Init+0x2d4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x1da>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a42      	ldr	r2, [pc, #264]	; (80026c8 <HAL_GPIO_Init+0x2d8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x1d6>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x1e4>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x1e4>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x1e4>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x1e4>
 80025d2:	2300      	movs	r3, #0
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	2103      	movs	r1, #3
 80025d8:	400a      	ands	r2, r1
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025e4:	4935      	ldr	r1, [pc, #212]	; (80026bc <HAL_GPIO_Init+0x2cc>)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_GPIO_Init+0x2dc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43da      	mvns	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	025b      	lsls	r3, r3, #9
 800260a:	4013      	ands	r3, r2
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_GPIO_Init+0x2dc>)
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_GPIO_Init+0x2dc>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43da      	mvns	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	029b      	lsls	r3, r3, #10
 8002634:	4013      	ands	r3, r2
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002640:	4b22      	ldr	r3, [pc, #136]	; (80026cc <HAL_GPIO_Init+0x2dc>)
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002646:	4b21      	ldr	r3, [pc, #132]	; (80026cc <HAL_GPIO_Init+0x2dc>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43da      	mvns	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	035b      	lsls	r3, r3, #13
 800265e:	4013      	ands	r3, r2
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_GPIO_Init+0x2dc>)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <HAL_GPIO_Init+0x2dc>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43da      	mvns	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	039b      	lsls	r3, r3, #14
 8002688:	4013      	ands	r3, r2
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002694:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_GPIO_Init+0x2dc>)
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	40da      	lsrs	r2, r3
 80026a8:	1e13      	subs	r3, r2, #0
 80026aa:	d000      	beq.n	80026ae <HAL_GPIO_Init+0x2be>
 80026ac:	e6a8      	b.n	8002400 <HAL_GPIO_Init+0x10>
  } 
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b006      	add	sp, #24
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010000 	.word	0x40010000
 80026c0:	48000400 	.word	0x48000400
 80026c4:	48000800 	.word	0x48000800
 80026c8:	48000c00 	.word	0x48000c00
 80026cc:	40010400 	.word	0x40010400

080026d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e305      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	d100      	bne.n	80026ee <HAL_RCC_OscConfig+0x1e>
 80026ec:	e08d      	b.n	800280a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026ee:	4bc5      	ldr	r3, [pc, #788]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	220c      	movs	r2, #12
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d00e      	beq.n	8002718 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026fa:	4bc2      	ldr	r3, [pc, #776]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	220c      	movs	r2, #12
 8002700:	4013      	ands	r3, r2
 8002702:	2b08      	cmp	r3, #8
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x64>
 8002706:	4bbf      	ldr	r3, [pc, #764]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	23c0      	movs	r3, #192	; 0xc0
 800270c:	025b      	lsls	r3, r3, #9
 800270e:	401a      	ands	r2, r3
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	025b      	lsls	r3, r3, #9
 8002714:	429a      	cmp	r2, r3
 8002716:	d10d      	bne.n	8002734 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	4bba      	ldr	r3, [pc, #744]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	4013      	ands	r3, r2
 8002722:	d100      	bne.n	8002726 <HAL_RCC_OscConfig+0x56>
 8002724:	e070      	b.n	8002808 <HAL_RCC_OscConfig+0x138>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d000      	beq.n	8002730 <HAL_RCC_OscConfig+0x60>
 800272e:	e06b      	b.n	8002808 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e2dc      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_RCC_OscConfig+0x7c>
 800273c:	4bb1      	ldr	r3, [pc, #708]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4bb0      	ldr	r3, [pc, #704]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	0249      	lsls	r1, r1, #9
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e02f      	b.n	80027ac <HAL_RCC_OscConfig+0xdc>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10c      	bne.n	800276e <HAL_RCC_OscConfig+0x9e>
 8002754:	4bab      	ldr	r3, [pc, #684]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4baa      	ldr	r3, [pc, #680]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800275a:	49ab      	ldr	r1, [pc, #684]	; (8002a08 <HAL_RCC_OscConfig+0x338>)
 800275c:	400a      	ands	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	4ba8      	ldr	r3, [pc, #672]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4ba7      	ldr	r3, [pc, #668]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002766:	49a9      	ldr	r1, [pc, #676]	; (8002a0c <HAL_RCC_OscConfig+0x33c>)
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e01e      	b.n	80027ac <HAL_RCC_OscConfig+0xdc>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d10e      	bne.n	8002794 <HAL_RCC_OscConfig+0xc4>
 8002776:	4ba3      	ldr	r3, [pc, #652]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4ba2      	ldr	r3, [pc, #648]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	02c9      	lsls	r1, r1, #11
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	4b9f      	ldr	r3, [pc, #636]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b9e      	ldr	r3, [pc, #632]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800278a:	2180      	movs	r1, #128	; 0x80
 800278c:	0249      	lsls	r1, r1, #9
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0xdc>
 8002794:	4b9b      	ldr	r3, [pc, #620]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b9a      	ldr	r3, [pc, #616]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800279a:	499b      	ldr	r1, [pc, #620]	; (8002a08 <HAL_RCC_OscConfig+0x338>)
 800279c:	400a      	ands	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	4b98      	ldr	r3, [pc, #608]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b97      	ldr	r3, [pc, #604]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80027a6:	4999      	ldr	r1, [pc, #612]	; (8002a0c <HAL_RCC_OscConfig+0x33c>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d014      	beq.n	80027de <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fe6a 	bl	800148c <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027be:	f7fe fe65 	bl	800148c <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e28e      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d0:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	4013      	ands	r3, r2
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0xee>
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fe55 	bl	800148c <HAL_GetTick>
 80027e2:	0003      	movs	r3, r0
 80027e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fe50 	bl	800148c <HAL_GetTick>
 80027ec:	0002      	movs	r2, r0
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e279      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	029b      	lsls	r3, r3, #10
 8002802:	4013      	ands	r3, r2
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x118>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2202      	movs	r2, #2
 8002810:	4013      	ands	r3, r2
 8002812:	d100      	bne.n	8002816 <HAL_RCC_OscConfig+0x146>
 8002814:	e06c      	b.n	80028f0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002816:	4b7b      	ldr	r3, [pc, #492]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	220c      	movs	r2, #12
 800281c:	4013      	ands	r3, r2
 800281e:	d00e      	beq.n	800283e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002820:	4b78      	ldr	r3, [pc, #480]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	220c      	movs	r2, #12
 8002826:	4013      	ands	r3, r2
 8002828:	2b08      	cmp	r3, #8
 800282a:	d11f      	bne.n	800286c <HAL_RCC_OscConfig+0x19c>
 800282c:	4b75      	ldr	r3, [pc, #468]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	23c0      	movs	r3, #192	; 0xc0
 8002832:	025b      	lsls	r3, r3, #9
 8002834:	401a      	ands	r2, r3
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	429a      	cmp	r2, r3
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b71      	ldr	r3, [pc, #452]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2202      	movs	r2, #2
 8002844:	4013      	ands	r3, r2
 8002846:	d005      	beq.n	8002854 <HAL_RCC_OscConfig+0x184>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e24c      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b6b      	ldr	r3, [pc, #428]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	22f8      	movs	r2, #248	; 0xf8
 800285a:	4393      	bics	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00da      	lsls	r2, r3, #3
 8002864:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e041      	b.n	80028f0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d024      	beq.n	80028be <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b63      	ldr	r3, [pc, #396]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b62      	ldr	r3, [pc, #392]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800287a:	2101      	movs	r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fe04 	bl	800148c <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fdff 	bl	800148c <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e228      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2202      	movs	r2, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d0f1      	beq.n	800288a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	22f8      	movs	r2, #248	; 0xf8
 80028ac:	4393      	bics	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	00da      	lsls	r2, r3, #3
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e018      	b.n	80028f0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	438a      	bics	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe fddf 	bl	800148c <HAL_GetTick>
 80028ce:	0003      	movs	r3, r0
 80028d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d4:	f7fe fdda 	bl	800148c <HAL_GetTick>
 80028d8:	0002      	movs	r2, r0
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e203      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2202      	movs	r2, #2
 80028ec:	4013      	ands	r3, r2
 80028ee:	d1f1      	bne.n	80028d4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2208      	movs	r2, #8
 80028f6:	4013      	ands	r3, r2
 80028f8:	d036      	beq.n	8002968 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d019      	beq.n	8002936 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002902:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002908:	2101      	movs	r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7fe fdbd 	bl	800148c <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe fdb8 	bl	800148c <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1e1      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	2202      	movs	r2, #2
 8002930:	4013      	ands	r3, r2
 8002932:	d0f1      	beq.n	8002918 <HAL_RCC_OscConfig+0x248>
 8002934:	e018      	b.n	8002968 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002936:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293a:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800293c:	2101      	movs	r1, #1
 800293e:	438a      	bics	r2, r1
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fda3 	bl	800148c <HAL_GetTick>
 8002946:	0003      	movs	r3, r0
 8002948:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294c:	f7fe fd9e 	bl	800148c <HAL_GetTick>
 8002950:	0002      	movs	r2, r0
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e1c7      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295e:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d1f1      	bne.n	800294c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2204      	movs	r2, #4
 800296e:	4013      	ands	r3, r2
 8002970:	d100      	bne.n	8002974 <HAL_RCC_OscConfig+0x2a4>
 8002972:	e0b5      	b.n	8002ae0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002974:	201f      	movs	r0, #31
 8002976:	183b      	adds	r3, r7, r0
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	055b      	lsls	r3, r3, #21
 8002984:	4013      	ands	r3, r2
 8002986:	d110      	bne.n	80029aa <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	0549      	lsls	r1, r1, #21
 8002992:	430a      	orrs	r2, r1
 8002994:	61da      	str	r2, [r3, #28]
 8002996:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	055b      	lsls	r3, r3, #21
 800299e:	4013      	ands	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029a4:	183b      	adds	r3, r7, r0
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_OscConfig+0x340>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4013      	ands	r3, r2
 80029b4:	d11a      	bne.n	80029ec <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCC_OscConfig+0x340>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_RCC_OscConfig+0x340>)
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	0049      	lsls	r1, r1, #1
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c4:	f7fe fd62 	bl	800148c <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ce:	f7fe fd5d 	bl	800148c <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b64      	cmp	r3, #100	; 0x64
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e186      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_OscConfig+0x340>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4013      	ands	r3, r2
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10f      	bne.n	8002a14 <HAL_RCC_OscConfig+0x344>
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80029f6:	6a1a      	ldr	r2, [r3, #32]
 80029f8:	4b02      	ldr	r3, [pc, #8]	; (8002a04 <HAL_RCC_OscConfig+0x334>)
 80029fa:	2101      	movs	r1, #1
 80029fc:	430a      	orrs	r2, r1
 80029fe:	621a      	str	r2, [r3, #32]
 8002a00:	e036      	b.n	8002a70 <HAL_RCC_OscConfig+0x3a0>
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	40021000 	.word	0x40021000
 8002a08:	fffeffff 	.word	0xfffeffff
 8002a0c:	fffbffff 	.word	0xfffbffff
 8002a10:	40007000 	.word	0x40007000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x366>
 8002a1c:	4bb6      	ldr	r3, [pc, #728]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	4bb5      	ldr	r3, [pc, #724]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	438a      	bics	r2, r1
 8002a26:	621a      	str	r2, [r3, #32]
 8002a28:	4bb3      	ldr	r3, [pc, #716]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a2a:	6a1a      	ldr	r2, [r3, #32]
 8002a2c:	4bb2      	ldr	r3, [pc, #712]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a2e:	2104      	movs	r1, #4
 8002a30:	438a      	bics	r2, r1
 8002a32:	621a      	str	r2, [r3, #32]
 8002a34:	e01c      	b.n	8002a70 <HAL_RCC_OscConfig+0x3a0>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x388>
 8002a3e:	4bae      	ldr	r3, [pc, #696]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a40:	6a1a      	ldr	r2, [r3, #32]
 8002a42:	4bad      	ldr	r3, [pc, #692]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a44:	2104      	movs	r1, #4
 8002a46:	430a      	orrs	r2, r1
 8002a48:	621a      	str	r2, [r3, #32]
 8002a4a:	4bab      	ldr	r3, [pc, #684]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a4c:	6a1a      	ldr	r2, [r3, #32]
 8002a4e:	4baa      	ldr	r3, [pc, #680]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	430a      	orrs	r2, r1
 8002a54:	621a      	str	r2, [r3, #32]
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0x3a0>
 8002a58:	4ba7      	ldr	r3, [pc, #668]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	4ba6      	ldr	r3, [pc, #664]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	438a      	bics	r2, r1
 8002a62:	621a      	str	r2, [r3, #32]
 8002a64:	4ba4      	ldr	r3, [pc, #656]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	4ba3      	ldr	r3, [pc, #652]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	438a      	bics	r2, r1
 8002a6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d014      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a78:	f7fe fd08 	bl	800148c <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a80:	e009      	b.n	8002a96 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe fd03 	bl	800148c <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	4a9b      	ldr	r2, [pc, #620]	; (8002cfc <HAL_RCC_OscConfig+0x62c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e12b      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	4b98      	ldr	r3, [pc, #608]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x3b2>
 8002aa0:	e013      	b.n	8002aca <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fcf3 	bl	800148c <HAL_GetTick>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	e009      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe fcee 	bl	800148c <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	4a91      	ldr	r2, [pc, #580]	; (8002cfc <HAL_RCC_OscConfig+0x62c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e116      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac0:	4b8d      	ldr	r3, [pc, #564]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aca:	231f      	movs	r3, #31
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b88      	ldr	r3, [pc, #544]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	4b87      	ldr	r3, [pc, #540]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002ada:	4989      	ldr	r1, [pc, #548]	; (8002d00 <HAL_RCC_OscConfig+0x630>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d12a      	bne.n	8002b48 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002af2:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af6:	4b80      	ldr	r3, [pc, #512]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002af8:	2104      	movs	r1, #4
 8002afa:	430a      	orrs	r2, r1
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002afe:	4b7e      	ldr	r3, [pc, #504]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b02:	4b7d      	ldr	r3, [pc, #500]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b04:	2101      	movs	r1, #1
 8002b06:	430a      	orrs	r2, r1
 8002b08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fcbf 	bl	800148c <HAL_GetTick>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b14:	f7fe fcba 	bl	800148c <HAL_GetTick>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0e3      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b26:	4b74      	ldr	r3, [pc, #464]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d0f1      	beq.n	8002b14 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b30:	4b71      	ldr	r3, [pc, #452]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b34:	22f8      	movs	r2, #248	; 0xf8
 8002b36:	4393      	bics	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	00da      	lsls	r2, r3, #3
 8002b40:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b42:	430a      	orrs	r2, r1
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34
 8002b46:	e034      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	3305      	adds	r3, #5
 8002b4e:	d111      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b50:	4b69      	ldr	r3, [pc, #420]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b54:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b56:	2104      	movs	r1, #4
 8002b58:	438a      	bics	r2, r1
 8002b5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b5c:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	22f8      	movs	r2, #248	; 0xf8
 8002b62:	4393      	bics	r3, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	00da      	lsls	r2, r3, #3
 8002b6c:	4b62      	ldr	r3, [pc, #392]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34
 8002b72:	e01e      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b74:	4b60      	ldr	r3, [pc, #384]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b78:	4b5f      	ldr	r3, [pc, #380]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b80:	4b5d      	ldr	r3, [pc, #372]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b84:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b86:	2101      	movs	r1, #1
 8002b88:	438a      	bics	r2, r1
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fc7e 	bl	800148c <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b96:	f7fe fc79 	bl	800148c <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e0a2      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	2202      	movs	r2, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d1f1      	bne.n	8002b96 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d100      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4ec>
 8002bba:	e097      	b.n	8002cec <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bbc:	4b4e      	ldr	r3, [pc, #312]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	220c      	movs	r2, #12
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d100      	bne.n	8002bca <HAL_RCC_OscConfig+0x4fa>
 8002bc8:	e06b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d14c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b48      	ldr	r3, [pc, #288]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002bd8:	494a      	ldr	r1, [pc, #296]	; (8002d04 <HAL_RCC_OscConfig+0x634>)
 8002bda:	400a      	ands	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fc55 	bl	800148c <HAL_GetTick>
 8002be2:	0003      	movs	r3, r0
 8002be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe fc50 	bl	800148c <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e079      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	049b      	lsls	r3, r3, #18
 8002c02:	4013      	ands	r3, r2
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c16:	430a      	orrs	r2, r1
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c1a:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a3a      	ldr	r2, [pc, #232]	; (8002d08 <HAL_RCC_OscConfig+0x638>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c3a:	2180      	movs	r1, #128	; 0x80
 8002c3c:	0449      	lsls	r1, r1, #17
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fe fc23 	bl	800148c <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fc1e 	bl	800148c <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e047      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	049b      	lsls	r3, r3, #18
 8002c66:	4013      	ands	r3, r2
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x57c>
 8002c6a:	e03f      	b.n	8002cec <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6c:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c72:	4924      	ldr	r1, [pc, #144]	; (8002d04 <HAL_RCC_OscConfig+0x634>)
 8002c74:	400a      	ands	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fc08 	bl	800148c <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe fc03 	bl	800148c <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e02c      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c94:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	049b      	lsls	r3, r3, #18
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x5b2>
 8002ca0:	e024      	b.n	8002cec <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e01f      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	23c0      	movs	r3, #192	; 0xc0
 8002cbe:	025b      	lsls	r3, r3, #9
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	220f      	movs	r2, #15
 8002cce:	401a      	ands	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	23f0      	movs	r3, #240	; 0xf0
 8002cdc:	039b      	lsls	r3, r3, #14
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b008      	add	sp, #32
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	00001388 	.word	0x00001388
 8002d00:	efffffff 	.word	0xefffffff
 8002d04:	feffffff 	.word	0xfeffffff
 8002d08:	ffc27fff 	.word	0xffc27fff

08002d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0b3      	b.n	8002e88 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b5b      	ldr	r3, [pc, #364]	; (8002e90 <HAL_RCC_ClockConfig+0x184>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2201      	movs	r2, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d911      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_RCC_ClockConfig+0x184>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2201      	movs	r2, #1
 8002d34:	4393      	bics	r3, r2
 8002d36:	0019      	movs	r1, r3
 8002d38:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <HAL_RCC_ClockConfig+0x184>)
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d40:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <HAL_RCC_ClockConfig+0x184>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e09a      	b.n	8002e88 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2202      	movs	r2, #2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d015      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2204      	movs	r2, #4
 8002d62:	4013      	ands	r3, r2
 8002d64:	d006      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d66:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002d6c:	21e0      	movs	r1, #224	; 0xe0
 8002d6e:	00c9      	lsls	r1, r1, #3
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	22f0      	movs	r2, #240	; 0xf0
 8002d7a:	4393      	bics	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	4b44      	ldr	r3, [pc, #272]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d040      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b3e      	ldr	r3, [pc, #248]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	4013      	ands	r3, r2
 8002da4:	d114      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06e      	b.n	8002e88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	049b      	lsls	r3, r3, #18
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e062      	b.n	8002e88 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc2:	4b34      	ldr	r3, [pc, #208]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e05b      	b.n	8002e88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd0:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	4393      	bics	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de4:	f7fe fb52 	bl	800148c <HAL_GetTick>
 8002de8:	0003      	movs	r3, r0
 8002dea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dec:	e009      	b.n	8002e02 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dee:	f7fe fb4d 	bl	800148c <HAL_GetTick>
 8002df2:	0002      	movs	r2, r0
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_RCC_ClockConfig+0x18c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e042      	b.n	8002e88 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	220c      	movs	r2, #12
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1ec      	bne.n	8002dee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCC_ClockConfig+0x184>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d211      	bcs.n	8002e46 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCC_ClockConfig+0x184>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2201      	movs	r2, #1
 8002e28:	4393      	bics	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_RCC_ClockConfig+0x184>)
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_RCC_ClockConfig+0x184>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e020      	b.n	8002e88 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <HAL_RCC_ClockConfig+0x190>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e64:	f000 f820 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e68:	0001      	movs	r1, r0
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_RCC_ClockConfig+0x188>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	220f      	movs	r2, #15
 8002e72:	4013      	ands	r3, r2
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <HAL_RCC_ClockConfig+0x194>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	000a      	movs	r2, r1
 8002e7a:	40da      	lsrs	r2, r3
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x198>)
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fe fabd 	bl	8001400 <HAL_InitTick>
  
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b004      	add	sp, #16
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40022000 	.word	0x40022000
 8002e94:	40021000 	.word	0x40021000
 8002e98:	00001388 	.word	0x00001388
 8002e9c:	fffff8ff 	.word	0xfffff8ff
 8002ea0:	08004878 	.word	0x08004878
 8002ea4:	20000014 	.word	0x20000014

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b08f      	sub	sp, #60	; 0x3c
 8002eac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002eae:	2314      	movs	r3, #20
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002eb6:	c313      	stmia	r3!, {r0, r1, r4}
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	4a2a      	ldr	r2, [pc, #168]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ec0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ec2:	c313      	stmia	r3!, {r0, r1, r4}
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	220c      	movs	r2, #12
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d002      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x4a>
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d003      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x50>
 8002ef0:	e02f      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef2:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ef6:	e02f      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	220f      	movs	r2, #15
 8002efe:	4013      	ands	r3, r2
 8002f00:	2214      	movs	r2, #20
 8002f02:	18ba      	adds	r2, r7, r2
 8002f04:	5cd3      	ldrb	r3, [r2, r3]
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f08:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	4013      	ands	r3, r2
 8002f10:	1d3a      	adds	r2, r7, #4
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f18:	23c0      	movs	r3, #192	; 0xc0
 8002f1a:	025b      	lsls	r3, r3, #9
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	025b      	lsls	r3, r3, #9
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f28:	4811      	ldr	r0, [pc, #68]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f2a:	f7fd f8f7 	bl	800011c <__udivsi3>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	001a      	movs	r2, r3
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	4353      	muls	r3, r2
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f3e:	f7fd f8ed 	bl	800011c <__udivsi3>
 8002f42:	0003      	movs	r3, r0
 8002f44:	001a      	movs	r2, r3
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	4353      	muls	r3, r2
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f50:	e002      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b00f      	add	sp, #60	; 0x3c
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	08004728 	.word	0x08004728
 8002f68:	08004738 	.word	0x08004738
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	007a1200 	.word	0x007a1200

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	20000014 	.word	0x20000014

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002f8c:	f7ff fff2 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f90:	0001      	movs	r1, r0
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	2207      	movs	r2, #7
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	40d9      	lsrs	r1, r3
 8002fa2:	000b      	movs	r3, r1
}    
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08004888 	.word	0x08004888

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	025b      	lsls	r3, r3, #9
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002fd0:	e08e      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2017      	movs	r0, #23
 8002fd4:	183b      	adds	r3, r7, r0
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	055b      	lsls	r3, r3, #21
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d110      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	4b5b      	ldr	r3, [pc, #364]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	0549      	lsls	r1, r1, #21
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	61da      	str	r2, [r3, #28]
 8002ff4:	4b58      	ldr	r3, [pc, #352]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	055b      	lsls	r3, r3, #21
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	183b      	adds	r3, r7, r0
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	4b54      	ldr	r3, [pc, #336]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4013      	ands	r3, r2
 8003012:	d11a      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003014:	4b51      	ldr	r3, [pc, #324]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b50      	ldr	r3, [pc, #320]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	0049      	lsls	r1, r1, #1
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003022:	f7fe fa33 	bl	800148c <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302a:	e008      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302c:	f7fe fa2e 	bl	800148c <HAL_GetTick>
 8003030:	0002      	movs	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e087      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4013      	ands	r3, r2
 8003048:	d0f0      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800304a:	4b43      	ldr	r3, [pc, #268]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	23c0      	movs	r3, #192	; 0xc0
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4013      	ands	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d034      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	23c0      	movs	r3, #192	; 0xc0
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4013      	ands	r3, r2
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	429a      	cmp	r2, r3
 800306a:	d02c      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800306c:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	4a3b      	ldr	r2, [pc, #236]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003072:	4013      	ands	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	0249      	lsls	r1, r1, #9
 8003080:	430a      	orrs	r2, r1
 8003082:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	4b33      	ldr	r3, [pc, #204]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800308a:	4936      	ldr	r1, [pc, #216]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800308c:	400a      	ands	r2, r1
 800308e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003090:	4b31      	ldr	r3, [pc, #196]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	4013      	ands	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7fe f9f5 	bl	800148c <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	e009      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a8:	f7fe f9f0 	bl	800148c <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	4a2d      	ldr	r2, [pc, #180]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e048      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4b20      	ldr	r3, [pc, #128]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030da:	2317      	movs	r3, #23
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030ea:	4920      	ldr	r1, [pc, #128]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2201      	movs	r2, #1
 80030f6:	4013      	ands	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	2203      	movs	r2, #3
 8003100:	4393      	bics	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800310a:	430a      	orrs	r2, r1
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2220      	movs	r2, #32
 8003114:	4013      	ands	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	2210      	movs	r2, #16
 800311e:	4393      	bics	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003128:	430a      	orrs	r2, r1
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	029b      	lsls	r3, r3, #10
 8003134:	4013      	ands	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	4393      	bics	r3, r2
 8003140:	0019      	movs	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003148:	430a      	orrs	r2, r1
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b006      	add	sp, #24
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	40021000 	.word	0x40021000
 800315c:	40007000 	.word	0x40007000
 8003160:	fffffcff 	.word	0xfffffcff
 8003164:	fffeffff 	.word	0xfffeffff
 8003168:	00001388 	.word	0x00001388
 800316c:	efffffff 	.word	0xefffffff

08003170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e042      	b.n	8003208 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	223d      	movs	r2, #61	; 0x3d
 8003186:	5c9b      	ldrb	r3, [r3, r2]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d107      	bne.n	800319e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	223c      	movs	r2, #60	; 0x3c
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f7fd feeb 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	223d      	movs	r2, #61	; 0x3d
 80031a2:	2102      	movs	r1, #2
 80031a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	0019      	movs	r1, r3
 80031b0:	0010      	movs	r0, r2
 80031b2:	f000 f935 	bl	8003420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2246      	movs	r2, #70	; 0x46
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223e      	movs	r2, #62	; 0x3e
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	223f      	movs	r2, #63	; 0x3f
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2241      	movs	r2, #65	; 0x41
 80031da:	2101      	movs	r1, #1
 80031dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2242      	movs	r2, #66	; 0x42
 80031e2:	2101      	movs	r1, #1
 80031e4:	5499      	strb	r1, [r3, r2]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2243      	movs	r2, #67	; 0x43
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2244      	movs	r2, #68	; 0x44
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2245      	movs	r2, #69	; 0x45
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	223d      	movs	r2, #61	; 0x3d
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	223d      	movs	r2, #61	; 0x3d
 800321c:	5c9b      	ldrb	r3, [r3, r2]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d001      	beq.n	8003228 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e028      	b.n	800327a <HAL_TIM_Base_Start+0x6a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	223d      	movs	r2, #61	; 0x3d
 800322c:	2102      	movs	r1, #2
 800322e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a13      	ldr	r2, [pc, #76]	; (8003284 <HAL_TIM_Base_Start+0x74>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_TIM_Base_Start+0x34>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a12      	ldr	r2, [pc, #72]	; (8003288 <HAL_TIM_Base_Start+0x78>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d111      	bne.n	8003268 <HAL_TIM_Base_Start+0x58>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2207      	movs	r2, #7
 800324c:	4013      	ands	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b06      	cmp	r3, #6
 8003254:	d010      	beq.n	8003278 <HAL_TIM_Base_Start+0x68>
    {
      __HAL_TIM_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003266:	e007      	b.n	8003278 <HAL_TIM_Base_Start+0x68>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2101      	movs	r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400

0800328c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223c      	movs	r2, #60	; 0x3c
 800329a:	5c9b      	ldrb	r3, [r3, r2]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_TIM_ConfigClockSource+0x18>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0b7      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x188>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	223c      	movs	r2, #60	; 0x3c
 80032a8:	2101      	movs	r1, #1
 80032aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	223d      	movs	r2, #61	; 0x3d
 80032b0:	2102      	movs	r1, #2
 80032b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2277      	movs	r2, #119	; 0x77
 80032c0:	4393      	bics	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a55      	ldr	r2, [pc, #340]	; (800341c <HAL_TIM_ConfigClockSource+0x190>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	0192      	lsls	r2, r2, #6
 80032dc:	4293      	cmp	r3, r2
 80032de:	d040      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0xd6>
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	0192      	lsls	r2, r2, #6
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d900      	bls.n	80032ea <HAL_TIM_ConfigClockSource+0x5e>
 80032e8:	e088      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x170>
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	0152      	lsls	r2, r2, #5
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d100      	bne.n	80032f4 <HAL_TIM_ConfigClockSource+0x68>
 80032f2:	e085      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x174>
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	0152      	lsls	r2, r2, #5
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d900      	bls.n	80032fe <HAL_TIM_ConfigClockSource+0x72>
 80032fc:	e07e      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x170>
 80032fe:	2b70      	cmp	r3, #112	; 0x70
 8003300:	d018      	beq.n	8003334 <HAL_TIM_ConfigClockSource+0xa8>
 8003302:	d900      	bls.n	8003306 <HAL_TIM_ConfigClockSource+0x7a>
 8003304:	e07a      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x170>
 8003306:	2b60      	cmp	r3, #96	; 0x60
 8003308:	d04f      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x11e>
 800330a:	d900      	bls.n	800330e <HAL_TIM_ConfigClockSource+0x82>
 800330c:	e076      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x170>
 800330e:	2b50      	cmp	r3, #80	; 0x50
 8003310:	d03b      	beq.n	800338a <HAL_TIM_ConfigClockSource+0xfe>
 8003312:	d900      	bls.n	8003316 <HAL_TIM_ConfigClockSource+0x8a>
 8003314:	e072      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x170>
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d057      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x13e>
 800331a:	d900      	bls.n	800331e <HAL_TIM_ConfigClockSource+0x92>
 800331c:	e06e      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x170>
 800331e:	2b30      	cmp	r3, #48	; 0x30
 8003320:	d063      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x15e>
 8003322:	d86b      	bhi.n	80033fc <HAL_TIM_ConfigClockSource+0x170>
 8003324:	2b20      	cmp	r3, #32
 8003326:	d060      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x15e>
 8003328:	d868      	bhi.n	80033fc <HAL_TIM_ConfigClockSource+0x170>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d05d      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x15e>
 800332e:	2b10      	cmp	r3, #16
 8003330:	d05b      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003332:	e063      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f000 f952 	bl	80035ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2277      	movs	r2, #119	; 0x77
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]
      break;
 8003360:	e04f      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6899      	ldr	r1, [r3, #8]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f000 f93b 	bl	80035ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	01c9      	lsls	r1, r1, #7
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
      break;
 8003388:	e03b      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	001a      	movs	r2, r3
 8003398:	f000 f8ae 	bl	80034f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2150      	movs	r1, #80	; 0x50
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 f908 	bl	80035b8 <TIM_ITRx_SetConfig>
      break;
 80033a8:	e02b      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	001a      	movs	r2, r3
 80033b8:	f000 f8cc 	bl	8003554 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2160      	movs	r1, #96	; 0x60
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 f8f8 	bl	80035b8 <TIM_ITRx_SetConfig>
      break;
 80033c8:	e01b      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	001a      	movs	r2, r3
 80033d8:	f000 f88e 	bl	80034f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2140      	movs	r1, #64	; 0x40
 80033e2:	0018      	movs	r0, r3
 80033e4:	f000 f8e8 	bl	80035b8 <TIM_ITRx_SetConfig>
      break;
 80033e8:	e00b      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0019      	movs	r1, r3
 80033f4:	0010      	movs	r0, r2
 80033f6:	f000 f8df 	bl	80035b8 <TIM_ITRx_SetConfig>
        break;
 80033fa:	e002      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	e000      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003400:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	223d      	movs	r2, #61	; 0x3d
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	223c      	movs	r2, #60	; 0x3c
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b004      	add	sp, #16
 800341a:	bd80      	pop	{r7, pc}
 800341c:	ffff00ff 	.word	0xffff00ff

08003420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a2b      	ldr	r2, [pc, #172]	; (80034e0 <TIM_Base_SetConfig+0xc0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0x20>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a2a      	ldr	r2, [pc, #168]	; (80034e4 <TIM_Base_SetConfig+0xc4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2270      	movs	r2, #112	; 0x70
 8003444:	4393      	bics	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <TIM_Base_SetConfig+0xc0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00f      	beq.n	800347a <TIM_Base_SetConfig+0x5a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <TIM_Base_SetConfig+0xc4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00b      	beq.n	800347a <TIM_Base_SetConfig+0x5a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <TIM_Base_SetConfig+0xc8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_Base_SetConfig+0x5a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <TIM_Base_SetConfig+0xcc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_Base_SetConfig+0x5a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1e      	ldr	r2, [pc, #120]	; (80034f0 <TIM_Base_SetConfig+0xd0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d108      	bne.n	800348c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <TIM_Base_SetConfig+0xd4>)
 800347e:	4013      	ands	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	4393      	bics	r3, r2
 8003492:	001a      	movs	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <TIM_Base_SetConfig+0xc0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0xaa>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a0b      	ldr	r2, [pc, #44]	; (80034ec <TIM_Base_SetConfig+0xcc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0xaa>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <TIM_Base_SetConfig+0xd0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d103      	bne.n	80034d2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	615a      	str	r2, [r3, #20]
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40002000 	.word	0x40002000
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800
 80034f4:	fffffcff 	.word	0xfffffcff

080034f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	2201      	movs	r2, #1
 8003510:	4393      	bics	r3, r2
 8003512:	001a      	movs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	22f0      	movs	r2, #240	; 0xf0
 8003522:	4393      	bics	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	220a      	movs	r2, #10
 8003534:	4393      	bics	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b006      	add	sp, #24
 8003552:	bd80      	pop	{r7, pc}

08003554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	2210      	movs	r2, #16
 8003566:	4393      	bics	r3, r2
 8003568:	001a      	movs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <TIM_TI2_ConfigInputStage+0x60>)
 800357e:	4013      	ands	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	031b      	lsls	r3, r3, #12
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	22a0      	movs	r2, #160	; 0xa0
 8003590:	4393      	bics	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b006      	add	sp, #24
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	ffff0fff 	.word	0xffff0fff

080035b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2270      	movs	r2, #112	; 0x70
 80035cc:	4393      	bics	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	2207      	movs	r2, #7
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	609a      	str	r2, [r3, #8]
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b004      	add	sp, #16
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <TIM_ETR_SetConfig+0x3c>)
 8003604:	4013      	ands	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	021a      	lsls	r2, r3, #8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	431a      	orrs	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4313      	orrs	r3, r2
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b006      	add	sp, #24
 8003626:	bd80      	pop	{r7, pc}
 8003628:	ffff00ff 	.word	0xffff00ff

0800362c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	223c      	movs	r2, #60	; 0x3c
 800363a:	5c9b      	ldrb	r3, [r3, r2]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003640:	2302      	movs	r3, #2
 8003642:	e03c      	b.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	223c      	movs	r2, #60	; 0x3c
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	223d      	movs	r2, #61	; 0x3d
 8003650:	2102      	movs	r1, #2
 8003652:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2270      	movs	r2, #112	; 0x70
 8003668:	4393      	bics	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10c      	bne.n	80036ac <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2280      	movs	r2, #128	; 0x80
 8003696:	4393      	bics	r3, r2
 8003698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	223d      	movs	r2, #61	; 0x3d
 80036b0:	2101      	movs	r1, #1
 80036b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	223c      	movs	r2, #60	; 0x3c
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b004      	add	sp, #16
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	40000400 	.word	0x40000400

080036d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e044      	b.n	800376c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2274      	movs	r2, #116	; 0x74
 80036ee:	2100      	movs	r1, #0
 80036f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fd fc73 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2224      	movs	r2, #36	; 0x24
 80036fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2101      	movs	r1, #1
 800370c:	438a      	bics	r2, r1
 800370e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f8da 	bl	80038cc <UART_SetConfig>
 8003718:	0003      	movs	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e024      	b.n	800376c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0018      	movs	r0, r3
 800372e:	f000 fa0d 	bl	8003b4c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	490d      	ldr	r1, [pc, #52]	; (8003774 <HAL_UART_Init+0xa4>)
 800373e:	400a      	ands	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2108      	movs	r1, #8
 800374e:	438a      	bics	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f000 faa5 	bl	8003cb4 <UART_CheckIdleState>
 800376a:	0003      	movs	r3, r0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}
 8003774:	fffff7ff 	.word	0xfffff7ff

08003778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	1dbb      	adds	r3, r7, #6
 8003786:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800378c:	2b20      	cmp	r3, #32
 800378e:	d000      	beq.n	8003792 <HAL_UART_Transmit+0x1a>
 8003790:	e096      	b.n	80038c0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_UART_Transmit+0x28>
 8003798:	1dbb      	adds	r3, r7, #6
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e08e      	b.n	80038c2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	015b      	lsls	r3, r3, #5
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d109      	bne.n	80037c4 <HAL_UART_Transmit+0x4c>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2201      	movs	r2, #1
 80037bc:	4013      	ands	r3, r2
 80037be:	d001      	beq.n	80037c4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e07e      	b.n	80038c2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2274      	movs	r2, #116	; 0x74
 80037c8:	5c9b      	ldrb	r3, [r3, r2]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Transmit+0x5a>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e077      	b.n	80038c2 <HAL_UART_Transmit+0x14a>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2274      	movs	r2, #116	; 0x74
 80037d6:	2101      	movs	r1, #1
 80037d8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	2100      	movs	r1, #0
 80037e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2221      	movs	r2, #33	; 0x21
 80037e6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037e8:	f7fd fe50 	bl	800148c <HAL_GetTick>
 80037ec:	0003      	movs	r3, r0
 80037ee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1dba      	adds	r2, r7, #6
 80037f4:	2150      	movs	r1, #80	; 0x50
 80037f6:	8812      	ldrh	r2, [r2, #0]
 80037f8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1dba      	adds	r2, r7, #6
 80037fe:	2152      	movs	r1, #82	; 0x52
 8003800:	8812      	ldrh	r2, [r2, #0]
 8003802:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	015b      	lsls	r3, r3, #5
 800380c:	429a      	cmp	r2, r3
 800380e:	d108      	bne.n	8003822 <HAL_UART_Transmit+0xaa>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	e003      	b.n	800382a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2274      	movs	r2, #116	; 0x74
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003832:	e02d      	b.n	8003890 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	0013      	movs	r3, r2
 800383e:	2200      	movs	r2, #0
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	f000 fa7f 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d001      	beq.n	800384e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e039      	b.n	80038c2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	05d2      	lsls	r2, r2, #23
 800385e:	0dd2      	lsrs	r2, r2, #23
 8003860:	b292      	uxth	r2, r2
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	3302      	adds	r3, #2
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	e008      	b.n	800387e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	b292      	uxth	r2, r2
 8003876:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	3301      	adds	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2252      	movs	r2, #82	; 0x52
 8003882:	5a9b      	ldrh	r3, [r3, r2]
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b299      	uxth	r1, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2252      	movs	r2, #82	; 0x52
 800388e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2252      	movs	r2, #82	; 0x52
 8003894:	5a9b      	ldrh	r3, [r3, r2]
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1cb      	bne.n	8003834 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	0013      	movs	r3, r2
 80038a6:	2200      	movs	r2, #0
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	f000 fa4b 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e005      	b.n	80038c2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b008      	add	sp, #32
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038d4:	231e      	movs	r3, #30
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a8d      	ldr	r2, [pc, #564]	; (8003b30 <UART_SetConfig+0x264>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	430a      	orrs	r2, r1
 8003908:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a88      	ldr	r2, [pc, #544]	; (8003b34 <UART_SetConfig+0x268>)
 8003912:	4013      	ands	r3, r2
 8003914:	0019      	movs	r1, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a7f      	ldr	r2, [pc, #508]	; (8003b38 <UART_SetConfig+0x26c>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a7b      	ldr	r2, [pc, #492]	; (8003b3c <UART_SetConfig+0x270>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d127      	bne.n	80039a2 <UART_SetConfig+0xd6>
 8003952:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <UART_SetConfig+0x274>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	2203      	movs	r2, #3
 8003958:	4013      	ands	r3, r2
 800395a:	2b03      	cmp	r3, #3
 800395c:	d00d      	beq.n	800397a <UART_SetConfig+0xae>
 800395e:	d81b      	bhi.n	8003998 <UART_SetConfig+0xcc>
 8003960:	2b02      	cmp	r3, #2
 8003962:	d014      	beq.n	800398e <UART_SetConfig+0xc2>
 8003964:	d818      	bhi.n	8003998 <UART_SetConfig+0xcc>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <UART_SetConfig+0xa4>
 800396a:	2b01      	cmp	r3, #1
 800396c:	d00a      	beq.n	8003984 <UART_SetConfig+0xb8>
 800396e:	e013      	b.n	8003998 <UART_SetConfig+0xcc>
 8003970:	231f      	movs	r3, #31
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e021      	b.n	80039be <UART_SetConfig+0xf2>
 800397a:	231f      	movs	r3, #31
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	2202      	movs	r2, #2
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e01c      	b.n	80039be <UART_SetConfig+0xf2>
 8003984:	231f      	movs	r3, #31
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2204      	movs	r2, #4
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e017      	b.n	80039be <UART_SetConfig+0xf2>
 800398e:	231f      	movs	r3, #31
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	2208      	movs	r2, #8
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e012      	b.n	80039be <UART_SetConfig+0xf2>
 8003998:	231f      	movs	r3, #31
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	2210      	movs	r2, #16
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e00d      	b.n	80039be <UART_SetConfig+0xf2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a67      	ldr	r2, [pc, #412]	; (8003b44 <UART_SetConfig+0x278>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d104      	bne.n	80039b6 <UART_SetConfig+0xea>
 80039ac:	231f      	movs	r3, #31
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e003      	b.n	80039be <UART_SetConfig+0xf2>
 80039b6:	231f      	movs	r3, #31
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	2210      	movs	r2, #16
 80039bc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d15d      	bne.n	8003a86 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80039ca:	231f      	movs	r3, #31
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d015      	beq.n	8003a00 <UART_SetConfig+0x134>
 80039d4:	dc18      	bgt.n	8003a08 <UART_SetConfig+0x13c>
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d00d      	beq.n	80039f6 <UART_SetConfig+0x12a>
 80039da:	dc15      	bgt.n	8003a08 <UART_SetConfig+0x13c>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <UART_SetConfig+0x11a>
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d005      	beq.n	80039f0 <UART_SetConfig+0x124>
 80039e4:	e010      	b.n	8003a08 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e6:	f7ff facf 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 80039ea:	0003      	movs	r3, r0
 80039ec:	61bb      	str	r3, [r7, #24]
        break;
 80039ee:	e012      	b.n	8003a16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f0:	4b55      	ldr	r3, [pc, #340]	; (8003b48 <UART_SetConfig+0x27c>)
 80039f2:	61bb      	str	r3, [r7, #24]
        break;
 80039f4:	e00f      	b.n	8003a16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f6:	f7ff fa57 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 80039fa:	0003      	movs	r3, r0
 80039fc:	61bb      	str	r3, [r7, #24]
        break;
 80039fe:	e00a      	b.n	8003a16 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	61bb      	str	r3, [r7, #24]
        break;
 8003a06:	e006      	b.n	8003a16 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a0c:	231e      	movs	r3, #30
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
        break;
 8003a14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d100      	bne.n	8003a1e <UART_SetConfig+0x152>
 8003a1c:	e07b      	b.n	8003b16 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	18d2      	adds	r2, r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	0019      	movs	r1, r3
 8003a30:	0010      	movs	r0, r2
 8003a32:	f7fc fb73 	bl	800011c <__udivsi3>
 8003a36:	0003      	movs	r3, r0
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	d91c      	bls.n	8003a7c <UART_SetConfig+0x1b0>
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	025b      	lsls	r3, r3, #9
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d217      	bcs.n	8003a7c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	200e      	movs	r0, #14
 8003a52:	183b      	adds	r3, r7, r0
 8003a54:	210f      	movs	r1, #15
 8003a56:	438a      	bics	r2, r1
 8003a58:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2207      	movs	r2, #7
 8003a62:	4013      	ands	r3, r2
 8003a64:	b299      	uxth	r1, r3
 8003a66:	183b      	adds	r3, r7, r0
 8003a68:	183a      	adds	r2, r7, r0
 8003a6a:	8812      	ldrh	r2, [r2, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	183a      	adds	r2, r7, r0
 8003a76:	8812      	ldrh	r2, [r2, #0]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	e04c      	b.n	8003b16 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003a7c:	231e      	movs	r3, #30
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	e047      	b.n	8003b16 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a86:	231f      	movs	r3, #31
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d015      	beq.n	8003abc <UART_SetConfig+0x1f0>
 8003a90:	dc18      	bgt.n	8003ac4 <UART_SetConfig+0x1f8>
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d00d      	beq.n	8003ab2 <UART_SetConfig+0x1e6>
 8003a96:	dc15      	bgt.n	8003ac4 <UART_SetConfig+0x1f8>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <UART_SetConfig+0x1d6>
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d005      	beq.n	8003aac <UART_SetConfig+0x1e0>
 8003aa0:	e010      	b.n	8003ac4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa2:	f7ff fa71 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	61bb      	str	r3, [r7, #24]
        break;
 8003aaa:	e012      	b.n	8003ad2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aac:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <UART_SetConfig+0x27c>)
 8003aae:	61bb      	str	r3, [r7, #24]
        break;
 8003ab0:	e00f      	b.n	8003ad2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab2:	f7ff f9f9 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	61bb      	str	r3, [r7, #24]
        break;
 8003aba:	e00a      	b.n	8003ad2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	61bb      	str	r3, [r7, #24]
        break;
 8003ac2:	e006      	b.n	8003ad2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ac8:	231e      	movs	r3, #30
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
        break;
 8003ad0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01e      	beq.n	8003b16 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	085a      	lsrs	r2, r3, #1
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	18d2      	adds	r2, r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	0010      	movs	r0, r2
 8003aea:	f7fc fb17 	bl	800011c <__udivsi3>
 8003aee:	0003      	movs	r3, r0
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	d909      	bls.n	8003b0e <UART_SetConfig+0x242>
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	025b      	lsls	r3, r3, #9
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d204      	bcs.n	8003b0e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	e003      	b.n	8003b16 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003b0e:	231e      	movs	r3, #30
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b22:	231e      	movs	r3, #30
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	781b      	ldrb	r3, [r3, #0]
}
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b008      	add	sp, #32
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	efff69f3 	.word	0xefff69f3
 8003b34:	ffffcfff 	.word	0xffffcfff
 8003b38:	fffff4ff 	.word	0xfffff4ff
 8003b3c:	40013800 	.word	0x40013800
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40004400 	.word	0x40004400
 8003b48:	007a1200 	.word	0x007a1200

08003b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a4a      	ldr	r2, [pc, #296]	; (8003c90 <UART_AdvFeatureConfig+0x144>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	0019      	movs	r1, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4a43      	ldr	r2, [pc, #268]	; (8003c94 <UART_AdvFeatureConfig+0x148>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a3b      	ldr	r2, [pc, #236]	; (8003c98 <UART_AdvFeatureConfig+0x14c>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	0019      	movs	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4a34      	ldr	r2, [pc, #208]	; (8003c9c <UART_AdvFeatureConfig+0x150>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	0019      	movs	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	2210      	movs	r2, #16
 8003be2:	4013      	ands	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a2c      	ldr	r2, [pc, #176]	; (8003ca0 <UART_AdvFeatureConfig+0x154>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2220      	movs	r2, #32
 8003c04:	4013      	ands	r3, r2
 8003c06:	d00b      	beq.n	8003c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4a25      	ldr	r2, [pc, #148]	; (8003ca4 <UART_AdvFeatureConfig+0x158>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	0019      	movs	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2240      	movs	r2, #64	; 0x40
 8003c26:	4013      	ands	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a1d      	ldr	r2, [pc, #116]	; (8003ca8 <UART_AdvFeatureConfig+0x15c>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	035b      	lsls	r3, r3, #13
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d10b      	bne.n	8003c66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4a15      	ldr	r2, [pc, #84]	; (8003cac <UART_AdvFeatureConfig+0x160>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d00b      	beq.n	8003c88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4a0e      	ldr	r2, [pc, #56]	; (8003cb0 <UART_AdvFeatureConfig+0x164>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]
  }
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	fffdffff 	.word	0xfffdffff
 8003c94:	fffeffff 	.word	0xfffeffff
 8003c98:	fffbffff 	.word	0xfffbffff
 8003c9c:	ffff7fff 	.word	0xffff7fff
 8003ca0:	ffffefff 	.word	0xffffefff
 8003ca4:	ffffdfff 	.word	0xffffdfff
 8003ca8:	ffefffff 	.word	0xffefffff
 8003cac:	ff9fffff 	.word	0xff9fffff
 8003cb0:	fff7ffff 	.word	0xfff7ffff

08003cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cc4:	f7fd fbe2 	bl	800148c <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d10c      	bne.n	8003cf4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	0391      	lsls	r1, r2, #14
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <UART_CheckIdleState+0x8c>)
 8003ce4:	9200      	str	r2, [sp, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f000 f82c 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003cec:	1e03      	subs	r3, r0, #0
 8003cee:	d001      	beq.n	8003cf4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e021      	b.n	8003d38 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d10c      	bne.n	8003d1c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2280      	movs	r2, #128	; 0x80
 8003d06:	03d1      	lsls	r1, r2, #15
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <UART_CheckIdleState+0x8c>)
 8003d0c:	9200      	str	r2, [sp, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f000 f818 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003d14:	1e03      	subs	r3, r0, #0
 8003d16:	d001      	beq.n	8003d1c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e00d      	b.n	8003d38 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2274      	movs	r2, #116	; 0x74
 8003d32:	2100      	movs	r1, #0
 8003d34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b004      	add	sp, #16
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	01ffffff 	.word	0x01ffffff

08003d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	1dfb      	adds	r3, r7, #7
 8003d52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	e05e      	b.n	8003e14 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	d05b      	beq.n	8003e14 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fd fb96 	bl	800148c <HAL_GetTick>
 8003d60:	0002      	movs	r2, r0
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11b      	bne.n	8003daa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	492f      	ldr	r1, [pc, #188]	; (8003e3c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	438a      	bics	r2, r1
 8003d90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2274      	movs	r2, #116	; 0x74
 8003da2:	2100      	movs	r1, #0
 8003da4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e044      	b.n	8003e34 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2204      	movs	r2, #4
 8003db2:	4013      	ands	r3, r2
 8003db4:	d02e      	beq.n	8003e14 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d124      	bne.n	8003e14 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2280      	movs	r2, #128	; 0x80
 8003dd0:	0112      	lsls	r2, r2, #4
 8003dd2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4917      	ldr	r1, [pc, #92]	; (8003e3c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003de0:	400a      	ands	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2101      	movs	r1, #1
 8003df0:	438a      	bics	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	2120      	movs	r1, #32
 8003e06:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2274      	movs	r2, #116	; 0x74
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e00f      	b.n	8003e34 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	425a      	negs	r2, r3
 8003e24:	4153      	adcs	r3, r2
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	001a      	movs	r2, r3
 8003e2a:	1dfb      	adds	r3, r7, #7
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d091      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b004      	add	sp, #16
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	fffffe5f 	.word	0xfffffe5f

08003e40 <__errno>:
 8003e40:	4b01      	ldr	r3, [pc, #4]	; (8003e48 <__errno+0x8>)
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	4770      	bx	lr
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	20000020 	.word	0x20000020

08003e4c <__libc_init_array>:
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	2600      	movs	r6, #0
 8003e50:	4d0c      	ldr	r5, [pc, #48]	; (8003e84 <__libc_init_array+0x38>)
 8003e52:	4c0d      	ldr	r4, [pc, #52]	; (8003e88 <__libc_init_array+0x3c>)
 8003e54:	1b64      	subs	r4, r4, r5
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	42a6      	cmp	r6, r4
 8003e5a:	d109      	bne.n	8003e70 <__libc_init_array+0x24>
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	f000 fc47 	bl	80046f0 <_init>
 8003e62:	4d0a      	ldr	r5, [pc, #40]	; (8003e8c <__libc_init_array+0x40>)
 8003e64:	4c0a      	ldr	r4, [pc, #40]	; (8003e90 <__libc_init_array+0x44>)
 8003e66:	1b64      	subs	r4, r4, r5
 8003e68:	10a4      	asrs	r4, r4, #2
 8003e6a:	42a6      	cmp	r6, r4
 8003e6c:	d105      	bne.n	8003e7a <__libc_init_array+0x2e>
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	00b3      	lsls	r3, r6, #2
 8003e72:	58eb      	ldr	r3, [r5, r3]
 8003e74:	4798      	blx	r3
 8003e76:	3601      	adds	r6, #1
 8003e78:	e7ee      	b.n	8003e58 <__libc_init_array+0xc>
 8003e7a:	00b3      	lsls	r3, r6, #2
 8003e7c:	58eb      	ldr	r3, [r5, r3]
 8003e7e:	4798      	blx	r3
 8003e80:	3601      	adds	r6, #1
 8003e82:	e7f2      	b.n	8003e6a <__libc_init_array+0x1e>
 8003e84:	080048c4 	.word	0x080048c4
 8003e88:	080048c4 	.word	0x080048c4
 8003e8c:	080048c4 	.word	0x080048c4
 8003e90:	080048c8 	.word	0x080048c8

08003e94 <memset>:
 8003e94:	0003      	movs	r3, r0
 8003e96:	1882      	adds	r2, r0, r2
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <memset+0xa>
 8003e9c:	4770      	bx	lr
 8003e9e:	7019      	strb	r1, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	e7f9      	b.n	8003e98 <memset+0x4>

08003ea4 <siprintf>:
 8003ea4:	b40e      	push	{r1, r2, r3}
 8003ea6:	b500      	push	{lr}
 8003ea8:	490b      	ldr	r1, [pc, #44]	; (8003ed8 <siprintf+0x34>)
 8003eaa:	b09c      	sub	sp, #112	; 0x70
 8003eac:	ab1d      	add	r3, sp, #116	; 0x74
 8003eae:	9002      	str	r0, [sp, #8]
 8003eb0:	9006      	str	r0, [sp, #24]
 8003eb2:	9107      	str	r1, [sp, #28]
 8003eb4:	9104      	str	r1, [sp, #16]
 8003eb6:	4809      	ldr	r0, [pc, #36]	; (8003edc <siprintf+0x38>)
 8003eb8:	4909      	ldr	r1, [pc, #36]	; (8003ee0 <siprintf+0x3c>)
 8003eba:	cb04      	ldmia	r3!, {r2}
 8003ebc:	9105      	str	r1, [sp, #20]
 8003ebe:	6800      	ldr	r0, [r0, #0]
 8003ec0:	a902      	add	r1, sp, #8
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	f000 f870 	bl	8003fa8 <_svfiprintf_r>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9a02      	ldr	r2, [sp, #8]
 8003ecc:	7013      	strb	r3, [r2, #0]
 8003ece:	b01c      	add	sp, #112	; 0x70
 8003ed0:	bc08      	pop	{r3}
 8003ed2:	b003      	add	sp, #12
 8003ed4:	4718      	bx	r3
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	7fffffff 	.word	0x7fffffff
 8003edc:	20000020 	.word	0x20000020
 8003ee0:	ffff0208 	.word	0xffff0208

08003ee4 <__ssputs_r>:
 8003ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee6:	688e      	ldr	r6, [r1, #8]
 8003ee8:	b085      	sub	sp, #20
 8003eea:	0007      	movs	r7, r0
 8003eec:	000c      	movs	r4, r1
 8003eee:	9203      	str	r2, [sp, #12]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	429e      	cmp	r6, r3
 8003ef4:	d83c      	bhi.n	8003f70 <__ssputs_r+0x8c>
 8003ef6:	2390      	movs	r3, #144	; 0x90
 8003ef8:	898a      	ldrh	r2, [r1, #12]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	421a      	tst	r2, r3
 8003efe:	d034      	beq.n	8003f6a <__ssputs_r+0x86>
 8003f00:	2503      	movs	r5, #3
 8003f02:	6909      	ldr	r1, [r1, #16]
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	1a5b      	subs	r3, r3, r1
 8003f08:	9302      	str	r3, [sp, #8]
 8003f0a:	6963      	ldr	r3, [r4, #20]
 8003f0c:	9802      	ldr	r0, [sp, #8]
 8003f0e:	435d      	muls	r5, r3
 8003f10:	0feb      	lsrs	r3, r5, #31
 8003f12:	195d      	adds	r5, r3, r5
 8003f14:	9b01      	ldr	r3, [sp, #4]
 8003f16:	106d      	asrs	r5, r5, #1
 8003f18:	3301      	adds	r3, #1
 8003f1a:	181b      	adds	r3, r3, r0
 8003f1c:	42ab      	cmp	r3, r5
 8003f1e:	d900      	bls.n	8003f22 <__ssputs_r+0x3e>
 8003f20:	001d      	movs	r5, r3
 8003f22:	0553      	lsls	r3, r2, #21
 8003f24:	d532      	bpl.n	8003f8c <__ssputs_r+0xa8>
 8003f26:	0029      	movs	r1, r5
 8003f28:	0038      	movs	r0, r7
 8003f2a:	f000 fb31 	bl	8004590 <_malloc_r>
 8003f2e:	1e06      	subs	r6, r0, #0
 8003f30:	d109      	bne.n	8003f46 <__ssputs_r+0x62>
 8003f32:	230c      	movs	r3, #12
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	2340      	movs	r3, #64	; 0x40
 8003f38:	2001      	movs	r0, #1
 8003f3a:	89a2      	ldrh	r2, [r4, #12]
 8003f3c:	4240      	negs	r0, r0
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	b005      	add	sp, #20
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f46:	9a02      	ldr	r2, [sp, #8]
 8003f48:	6921      	ldr	r1, [r4, #16]
 8003f4a:	f000 faba 	bl	80044c2 <memcpy>
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <__ssputs_r+0xc0>)
 8003f52:	401a      	ands	r2, r3
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	4313      	orrs	r3, r2
 8003f58:	81a3      	strh	r3, [r4, #12]
 8003f5a:	9b02      	ldr	r3, [sp, #8]
 8003f5c:	6126      	str	r6, [r4, #16]
 8003f5e:	18f6      	adds	r6, r6, r3
 8003f60:	6026      	str	r6, [r4, #0]
 8003f62:	6165      	str	r5, [r4, #20]
 8003f64:	9e01      	ldr	r6, [sp, #4]
 8003f66:	1aed      	subs	r5, r5, r3
 8003f68:	60a5      	str	r5, [r4, #8]
 8003f6a:	9b01      	ldr	r3, [sp, #4]
 8003f6c:	429e      	cmp	r6, r3
 8003f6e:	d900      	bls.n	8003f72 <__ssputs_r+0x8e>
 8003f70:	9e01      	ldr	r6, [sp, #4]
 8003f72:	0032      	movs	r2, r6
 8003f74:	9903      	ldr	r1, [sp, #12]
 8003f76:	6820      	ldr	r0, [r4, #0]
 8003f78:	f000 faac 	bl	80044d4 <memmove>
 8003f7c:	68a3      	ldr	r3, [r4, #8]
 8003f7e:	2000      	movs	r0, #0
 8003f80:	1b9b      	subs	r3, r3, r6
 8003f82:	60a3      	str	r3, [r4, #8]
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	199e      	adds	r6, r3, r6
 8003f88:	6026      	str	r6, [r4, #0]
 8003f8a:	e7da      	b.n	8003f42 <__ssputs_r+0x5e>
 8003f8c:	002a      	movs	r2, r5
 8003f8e:	0038      	movs	r0, r7
 8003f90:	f000 fb5c 	bl	800464c <_realloc_r>
 8003f94:	1e06      	subs	r6, r0, #0
 8003f96:	d1e0      	bne.n	8003f5a <__ssputs_r+0x76>
 8003f98:	0038      	movs	r0, r7
 8003f9a:	6921      	ldr	r1, [r4, #16]
 8003f9c:	f000 faae 	bl	80044fc <_free_r>
 8003fa0:	e7c7      	b.n	8003f32 <__ssputs_r+0x4e>
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	fffffb7f 	.word	0xfffffb7f

08003fa8 <_svfiprintf_r>:
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003faa:	b0a1      	sub	sp, #132	; 0x84
 8003fac:	9003      	str	r0, [sp, #12]
 8003fae:	001d      	movs	r5, r3
 8003fb0:	898b      	ldrh	r3, [r1, #12]
 8003fb2:	000f      	movs	r7, r1
 8003fb4:	0016      	movs	r6, r2
 8003fb6:	061b      	lsls	r3, r3, #24
 8003fb8:	d511      	bpl.n	8003fde <_svfiprintf_r+0x36>
 8003fba:	690b      	ldr	r3, [r1, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10e      	bne.n	8003fde <_svfiprintf_r+0x36>
 8003fc0:	2140      	movs	r1, #64	; 0x40
 8003fc2:	f000 fae5 	bl	8004590 <_malloc_r>
 8003fc6:	6038      	str	r0, [r7, #0]
 8003fc8:	6138      	str	r0, [r7, #16]
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d105      	bne.n	8003fda <_svfiprintf_r+0x32>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	9a03      	ldr	r2, [sp, #12]
 8003fd2:	3801      	subs	r0, #1
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	b021      	add	sp, #132	; 0x84
 8003fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fda:	2340      	movs	r3, #64	; 0x40
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	ac08      	add	r4, sp, #32
 8003fe2:	6163      	str	r3, [r4, #20]
 8003fe4:	3320      	adds	r3, #32
 8003fe6:	7663      	strb	r3, [r4, #25]
 8003fe8:	3310      	adds	r3, #16
 8003fea:	76a3      	strb	r3, [r4, #26]
 8003fec:	9507      	str	r5, [sp, #28]
 8003fee:	0035      	movs	r5, r6
 8003ff0:	782b      	ldrb	r3, [r5, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <_svfiprintf_r+0x52>
 8003ff6:	2b25      	cmp	r3, #37	; 0x25
 8003ff8:	d147      	bne.n	800408a <_svfiprintf_r+0xe2>
 8003ffa:	1bab      	subs	r3, r5, r6
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	42b5      	cmp	r5, r6
 8004000:	d00c      	beq.n	800401c <_svfiprintf_r+0x74>
 8004002:	0032      	movs	r2, r6
 8004004:	0039      	movs	r1, r7
 8004006:	9803      	ldr	r0, [sp, #12]
 8004008:	f7ff ff6c 	bl	8003ee4 <__ssputs_r>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d100      	bne.n	8004012 <_svfiprintf_r+0x6a>
 8004010:	e0ae      	b.n	8004170 <_svfiprintf_r+0x1c8>
 8004012:	6962      	ldr	r2, [r4, #20]
 8004014:	9b05      	ldr	r3, [sp, #20]
 8004016:	4694      	mov	ip, r2
 8004018:	4463      	add	r3, ip
 800401a:	6163      	str	r3, [r4, #20]
 800401c:	782b      	ldrb	r3, [r5, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d100      	bne.n	8004024 <_svfiprintf_r+0x7c>
 8004022:	e0a5      	b.n	8004170 <_svfiprintf_r+0x1c8>
 8004024:	2201      	movs	r2, #1
 8004026:	2300      	movs	r3, #0
 8004028:	4252      	negs	r2, r2
 800402a:	6062      	str	r2, [r4, #4]
 800402c:	a904      	add	r1, sp, #16
 800402e:	3254      	adds	r2, #84	; 0x54
 8004030:	1852      	adds	r2, r2, r1
 8004032:	1c6e      	adds	r6, r5, #1
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	60e3      	str	r3, [r4, #12]
 8004038:	60a3      	str	r3, [r4, #8]
 800403a:	7013      	strb	r3, [r2, #0]
 800403c:	65a3      	str	r3, [r4, #88]	; 0x58
 800403e:	2205      	movs	r2, #5
 8004040:	7831      	ldrb	r1, [r6, #0]
 8004042:	4854      	ldr	r0, [pc, #336]	; (8004194 <_svfiprintf_r+0x1ec>)
 8004044:	f000 fa32 	bl	80044ac <memchr>
 8004048:	1c75      	adds	r5, r6, #1
 800404a:	2800      	cmp	r0, #0
 800404c:	d11f      	bne.n	800408e <_svfiprintf_r+0xe6>
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	06d3      	lsls	r3, r2, #27
 8004052:	d504      	bpl.n	800405e <_svfiprintf_r+0xb6>
 8004054:	2353      	movs	r3, #83	; 0x53
 8004056:	a904      	add	r1, sp, #16
 8004058:	185b      	adds	r3, r3, r1
 800405a:	2120      	movs	r1, #32
 800405c:	7019      	strb	r1, [r3, #0]
 800405e:	0713      	lsls	r3, r2, #28
 8004060:	d504      	bpl.n	800406c <_svfiprintf_r+0xc4>
 8004062:	2353      	movs	r3, #83	; 0x53
 8004064:	a904      	add	r1, sp, #16
 8004066:	185b      	adds	r3, r3, r1
 8004068:	212b      	movs	r1, #43	; 0x2b
 800406a:	7019      	strb	r1, [r3, #0]
 800406c:	7833      	ldrb	r3, [r6, #0]
 800406e:	2b2a      	cmp	r3, #42	; 0x2a
 8004070:	d016      	beq.n	80040a0 <_svfiprintf_r+0xf8>
 8004072:	0035      	movs	r5, r6
 8004074:	2100      	movs	r1, #0
 8004076:	200a      	movs	r0, #10
 8004078:	68e3      	ldr	r3, [r4, #12]
 800407a:	782a      	ldrb	r2, [r5, #0]
 800407c:	1c6e      	adds	r6, r5, #1
 800407e:	3a30      	subs	r2, #48	; 0x30
 8004080:	2a09      	cmp	r2, #9
 8004082:	d94e      	bls.n	8004122 <_svfiprintf_r+0x17a>
 8004084:	2900      	cmp	r1, #0
 8004086:	d111      	bne.n	80040ac <_svfiprintf_r+0x104>
 8004088:	e017      	b.n	80040ba <_svfiprintf_r+0x112>
 800408a:	3501      	adds	r5, #1
 800408c:	e7b0      	b.n	8003ff0 <_svfiprintf_r+0x48>
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <_svfiprintf_r+0x1ec>)
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	1ac0      	subs	r0, r0, r3
 8004094:	2301      	movs	r3, #1
 8004096:	4083      	lsls	r3, r0
 8004098:	4313      	orrs	r3, r2
 800409a:	002e      	movs	r6, r5
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	e7ce      	b.n	800403e <_svfiprintf_r+0x96>
 80040a0:	9b07      	ldr	r3, [sp, #28]
 80040a2:	1d19      	adds	r1, r3, #4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	9107      	str	r1, [sp, #28]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db01      	blt.n	80040b0 <_svfiprintf_r+0x108>
 80040ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80040ae:	e004      	b.n	80040ba <_svfiprintf_r+0x112>
 80040b0:	425b      	negs	r3, r3
 80040b2:	60e3      	str	r3, [r4, #12]
 80040b4:	2302      	movs	r3, #2
 80040b6:	4313      	orrs	r3, r2
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	782b      	ldrb	r3, [r5, #0]
 80040bc:	2b2e      	cmp	r3, #46	; 0x2e
 80040be:	d10a      	bne.n	80040d6 <_svfiprintf_r+0x12e>
 80040c0:	786b      	ldrb	r3, [r5, #1]
 80040c2:	2b2a      	cmp	r3, #42	; 0x2a
 80040c4:	d135      	bne.n	8004132 <_svfiprintf_r+0x18a>
 80040c6:	9b07      	ldr	r3, [sp, #28]
 80040c8:	3502      	adds	r5, #2
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	9207      	str	r2, [sp, #28]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db2b      	blt.n	800412c <_svfiprintf_r+0x184>
 80040d4:	9309      	str	r3, [sp, #36]	; 0x24
 80040d6:	4e30      	ldr	r6, [pc, #192]	; (8004198 <_svfiprintf_r+0x1f0>)
 80040d8:	2203      	movs	r2, #3
 80040da:	0030      	movs	r0, r6
 80040dc:	7829      	ldrb	r1, [r5, #0]
 80040de:	f000 f9e5 	bl	80044ac <memchr>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d006      	beq.n	80040f4 <_svfiprintf_r+0x14c>
 80040e6:	2340      	movs	r3, #64	; 0x40
 80040e8:	1b80      	subs	r0, r0, r6
 80040ea:	4083      	lsls	r3, r0
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	3501      	adds	r5, #1
 80040f0:	4313      	orrs	r3, r2
 80040f2:	6023      	str	r3, [r4, #0]
 80040f4:	7829      	ldrb	r1, [r5, #0]
 80040f6:	2206      	movs	r2, #6
 80040f8:	4828      	ldr	r0, [pc, #160]	; (800419c <_svfiprintf_r+0x1f4>)
 80040fa:	1c6e      	adds	r6, r5, #1
 80040fc:	7621      	strb	r1, [r4, #24]
 80040fe:	f000 f9d5 	bl	80044ac <memchr>
 8004102:	2800      	cmp	r0, #0
 8004104:	d03c      	beq.n	8004180 <_svfiprintf_r+0x1d8>
 8004106:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <_svfiprintf_r+0x1f8>)
 8004108:	2b00      	cmp	r3, #0
 800410a:	d125      	bne.n	8004158 <_svfiprintf_r+0x1b0>
 800410c:	2207      	movs	r2, #7
 800410e:	9b07      	ldr	r3, [sp, #28]
 8004110:	3307      	adds	r3, #7
 8004112:	4393      	bics	r3, r2
 8004114:	3308      	adds	r3, #8
 8004116:	9307      	str	r3, [sp, #28]
 8004118:	6963      	ldr	r3, [r4, #20]
 800411a:	9a04      	ldr	r2, [sp, #16]
 800411c:	189b      	adds	r3, r3, r2
 800411e:	6163      	str	r3, [r4, #20]
 8004120:	e765      	b.n	8003fee <_svfiprintf_r+0x46>
 8004122:	4343      	muls	r3, r0
 8004124:	0035      	movs	r5, r6
 8004126:	2101      	movs	r1, #1
 8004128:	189b      	adds	r3, r3, r2
 800412a:	e7a6      	b.n	800407a <_svfiprintf_r+0xd2>
 800412c:	2301      	movs	r3, #1
 800412e:	425b      	negs	r3, r3
 8004130:	e7d0      	b.n	80040d4 <_svfiprintf_r+0x12c>
 8004132:	2300      	movs	r3, #0
 8004134:	200a      	movs	r0, #10
 8004136:	001a      	movs	r2, r3
 8004138:	3501      	adds	r5, #1
 800413a:	6063      	str	r3, [r4, #4]
 800413c:	7829      	ldrb	r1, [r5, #0]
 800413e:	1c6e      	adds	r6, r5, #1
 8004140:	3930      	subs	r1, #48	; 0x30
 8004142:	2909      	cmp	r1, #9
 8004144:	d903      	bls.n	800414e <_svfiprintf_r+0x1a6>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0c5      	beq.n	80040d6 <_svfiprintf_r+0x12e>
 800414a:	9209      	str	r2, [sp, #36]	; 0x24
 800414c:	e7c3      	b.n	80040d6 <_svfiprintf_r+0x12e>
 800414e:	4342      	muls	r2, r0
 8004150:	0035      	movs	r5, r6
 8004152:	2301      	movs	r3, #1
 8004154:	1852      	adds	r2, r2, r1
 8004156:	e7f1      	b.n	800413c <_svfiprintf_r+0x194>
 8004158:	ab07      	add	r3, sp, #28
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	003a      	movs	r2, r7
 800415e:	0021      	movs	r1, r4
 8004160:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <_svfiprintf_r+0x1fc>)
 8004162:	9803      	ldr	r0, [sp, #12]
 8004164:	e000      	b.n	8004168 <_svfiprintf_r+0x1c0>
 8004166:	bf00      	nop
 8004168:	9004      	str	r0, [sp, #16]
 800416a:	9b04      	ldr	r3, [sp, #16]
 800416c:	3301      	adds	r3, #1
 800416e:	d1d3      	bne.n	8004118 <_svfiprintf_r+0x170>
 8004170:	89bb      	ldrh	r3, [r7, #12]
 8004172:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004174:	065b      	lsls	r3, r3, #25
 8004176:	d400      	bmi.n	800417a <_svfiprintf_r+0x1d2>
 8004178:	e72d      	b.n	8003fd6 <_svfiprintf_r+0x2e>
 800417a:	2001      	movs	r0, #1
 800417c:	4240      	negs	r0, r0
 800417e:	e72a      	b.n	8003fd6 <_svfiprintf_r+0x2e>
 8004180:	ab07      	add	r3, sp, #28
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	003a      	movs	r2, r7
 8004186:	0021      	movs	r1, r4
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <_svfiprintf_r+0x1fc>)
 800418a:	9803      	ldr	r0, [sp, #12]
 800418c:	f000 f87c 	bl	8004288 <_printf_i>
 8004190:	e7ea      	b.n	8004168 <_svfiprintf_r+0x1c0>
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	08004890 	.word	0x08004890
 8004198:	08004896 	.word	0x08004896
 800419c:	0800489a 	.word	0x0800489a
 80041a0:	00000000 	.word	0x00000000
 80041a4:	08003ee5 	.word	0x08003ee5

080041a8 <_printf_common>:
 80041a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041aa:	0015      	movs	r5, r2
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	688a      	ldr	r2, [r1, #8]
 80041b0:	690b      	ldr	r3, [r1, #16]
 80041b2:	000c      	movs	r4, r1
 80041b4:	9000      	str	r0, [sp, #0]
 80041b6:	4293      	cmp	r3, r2
 80041b8:	da00      	bge.n	80041bc <_printf_common+0x14>
 80041ba:	0013      	movs	r3, r2
 80041bc:	0022      	movs	r2, r4
 80041be:	602b      	str	r3, [r5, #0]
 80041c0:	3243      	adds	r2, #67	; 0x43
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	d001      	beq.n	80041cc <_printf_common+0x24>
 80041c8:	3301      	adds	r3, #1
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	069b      	lsls	r3, r3, #26
 80041d0:	d502      	bpl.n	80041d8 <_printf_common+0x30>
 80041d2:	682b      	ldr	r3, [r5, #0]
 80041d4:	3302      	adds	r3, #2
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	2306      	movs	r3, #6
 80041dc:	0017      	movs	r7, r2
 80041de:	401f      	ands	r7, r3
 80041e0:	421a      	tst	r2, r3
 80041e2:	d027      	beq.n	8004234 <_printf_common+0x8c>
 80041e4:	0023      	movs	r3, r4
 80041e6:	3343      	adds	r3, #67	; 0x43
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	1e5a      	subs	r2, r3, #1
 80041ec:	4193      	sbcs	r3, r2
 80041ee:	6822      	ldr	r2, [r4, #0]
 80041f0:	0692      	lsls	r2, r2, #26
 80041f2:	d430      	bmi.n	8004256 <_printf_common+0xae>
 80041f4:	0022      	movs	r2, r4
 80041f6:	9901      	ldr	r1, [sp, #4]
 80041f8:	9800      	ldr	r0, [sp, #0]
 80041fa:	9e08      	ldr	r6, [sp, #32]
 80041fc:	3243      	adds	r2, #67	; 0x43
 80041fe:	47b0      	blx	r6
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d025      	beq.n	8004250 <_printf_common+0xa8>
 8004204:	2306      	movs	r3, #6
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	682a      	ldr	r2, [r5, #0]
 800420a:	68e1      	ldr	r1, [r4, #12]
 800420c:	2500      	movs	r5, #0
 800420e:	4003      	ands	r3, r0
 8004210:	2b04      	cmp	r3, #4
 8004212:	d103      	bne.n	800421c <_printf_common+0x74>
 8004214:	1a8d      	subs	r5, r1, r2
 8004216:	43eb      	mvns	r3, r5
 8004218:	17db      	asrs	r3, r3, #31
 800421a:	401d      	ands	r5, r3
 800421c:	68a3      	ldr	r3, [r4, #8]
 800421e:	6922      	ldr	r2, [r4, #16]
 8004220:	4293      	cmp	r3, r2
 8004222:	dd01      	ble.n	8004228 <_printf_common+0x80>
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	18ed      	adds	r5, r5, r3
 8004228:	2700      	movs	r7, #0
 800422a:	42bd      	cmp	r5, r7
 800422c:	d120      	bne.n	8004270 <_printf_common+0xc8>
 800422e:	2000      	movs	r0, #0
 8004230:	e010      	b.n	8004254 <_printf_common+0xac>
 8004232:	3701      	adds	r7, #1
 8004234:	68e3      	ldr	r3, [r4, #12]
 8004236:	682a      	ldr	r2, [r5, #0]
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	42bb      	cmp	r3, r7
 800423c:	ddd2      	ble.n	80041e4 <_printf_common+0x3c>
 800423e:	0022      	movs	r2, r4
 8004240:	2301      	movs	r3, #1
 8004242:	9901      	ldr	r1, [sp, #4]
 8004244:	9800      	ldr	r0, [sp, #0]
 8004246:	9e08      	ldr	r6, [sp, #32]
 8004248:	3219      	adds	r2, #25
 800424a:	47b0      	blx	r6
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d1f0      	bne.n	8004232 <_printf_common+0x8a>
 8004250:	2001      	movs	r0, #1
 8004252:	4240      	negs	r0, r0
 8004254:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004256:	2030      	movs	r0, #48	; 0x30
 8004258:	18e1      	adds	r1, r4, r3
 800425a:	3143      	adds	r1, #67	; 0x43
 800425c:	7008      	strb	r0, [r1, #0]
 800425e:	0021      	movs	r1, r4
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	3145      	adds	r1, #69	; 0x45
 8004264:	7809      	ldrb	r1, [r1, #0]
 8004266:	18a2      	adds	r2, r4, r2
 8004268:	3243      	adds	r2, #67	; 0x43
 800426a:	3302      	adds	r3, #2
 800426c:	7011      	strb	r1, [r2, #0]
 800426e:	e7c1      	b.n	80041f4 <_printf_common+0x4c>
 8004270:	0022      	movs	r2, r4
 8004272:	2301      	movs	r3, #1
 8004274:	9901      	ldr	r1, [sp, #4]
 8004276:	9800      	ldr	r0, [sp, #0]
 8004278:	9e08      	ldr	r6, [sp, #32]
 800427a:	321a      	adds	r2, #26
 800427c:	47b0      	blx	r6
 800427e:	1c43      	adds	r3, r0, #1
 8004280:	d0e6      	beq.n	8004250 <_printf_common+0xa8>
 8004282:	3701      	adds	r7, #1
 8004284:	e7d1      	b.n	800422a <_printf_common+0x82>
	...

08004288 <_printf_i>:
 8004288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428a:	b08b      	sub	sp, #44	; 0x2c
 800428c:	9206      	str	r2, [sp, #24]
 800428e:	000a      	movs	r2, r1
 8004290:	3243      	adds	r2, #67	; 0x43
 8004292:	9307      	str	r3, [sp, #28]
 8004294:	9005      	str	r0, [sp, #20]
 8004296:	9204      	str	r2, [sp, #16]
 8004298:	7e0a      	ldrb	r2, [r1, #24]
 800429a:	000c      	movs	r4, r1
 800429c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800429e:	2a78      	cmp	r2, #120	; 0x78
 80042a0:	d806      	bhi.n	80042b0 <_printf_i+0x28>
 80042a2:	2a62      	cmp	r2, #98	; 0x62
 80042a4:	d808      	bhi.n	80042b8 <_printf_i+0x30>
 80042a6:	2a00      	cmp	r2, #0
 80042a8:	d100      	bne.n	80042ac <_printf_i+0x24>
 80042aa:	e0c0      	b.n	800442e <_printf_i+0x1a6>
 80042ac:	2a58      	cmp	r2, #88	; 0x58
 80042ae:	d052      	beq.n	8004356 <_printf_i+0xce>
 80042b0:	0026      	movs	r6, r4
 80042b2:	3642      	adds	r6, #66	; 0x42
 80042b4:	7032      	strb	r2, [r6, #0]
 80042b6:	e022      	b.n	80042fe <_printf_i+0x76>
 80042b8:	0010      	movs	r0, r2
 80042ba:	3863      	subs	r0, #99	; 0x63
 80042bc:	2815      	cmp	r0, #21
 80042be:	d8f7      	bhi.n	80042b0 <_printf_i+0x28>
 80042c0:	f7fb ff22 	bl	8000108 <__gnu_thumb1_case_shi>
 80042c4:	001f0016 	.word	0x001f0016
 80042c8:	fff6fff6 	.word	0xfff6fff6
 80042cc:	fff6fff6 	.word	0xfff6fff6
 80042d0:	fff6001f 	.word	0xfff6001f
 80042d4:	fff6fff6 	.word	0xfff6fff6
 80042d8:	00a8fff6 	.word	0x00a8fff6
 80042dc:	009a0036 	.word	0x009a0036
 80042e0:	fff6fff6 	.word	0xfff6fff6
 80042e4:	fff600b9 	.word	0xfff600b9
 80042e8:	fff60036 	.word	0xfff60036
 80042ec:	009efff6 	.word	0x009efff6
 80042f0:	0026      	movs	r6, r4
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	3642      	adds	r6, #66	; 0x42
 80042f6:	1d11      	adds	r1, r2, #4
 80042f8:	6019      	str	r1, [r3, #0]
 80042fa:	6813      	ldr	r3, [r2, #0]
 80042fc:	7033      	strb	r3, [r6, #0]
 80042fe:	2301      	movs	r3, #1
 8004300:	e0a7      	b.n	8004452 <_printf_i+0x1ca>
 8004302:	6808      	ldr	r0, [r1, #0]
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	1d0a      	adds	r2, r1, #4
 8004308:	0605      	lsls	r5, r0, #24
 800430a:	d50b      	bpl.n	8004324 <_printf_i+0x9c>
 800430c:	680d      	ldr	r5, [r1, #0]
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	2d00      	cmp	r5, #0
 8004312:	da03      	bge.n	800431c <_printf_i+0x94>
 8004314:	232d      	movs	r3, #45	; 0x2d
 8004316:	9a04      	ldr	r2, [sp, #16]
 8004318:	426d      	negs	r5, r5
 800431a:	7013      	strb	r3, [r2, #0]
 800431c:	4b61      	ldr	r3, [pc, #388]	; (80044a4 <_printf_i+0x21c>)
 800431e:	270a      	movs	r7, #10
 8004320:	9303      	str	r3, [sp, #12]
 8004322:	e032      	b.n	800438a <_printf_i+0x102>
 8004324:	680d      	ldr	r5, [r1, #0]
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	0641      	lsls	r1, r0, #25
 800432a:	d5f1      	bpl.n	8004310 <_printf_i+0x88>
 800432c:	b22d      	sxth	r5, r5
 800432e:	e7ef      	b.n	8004310 <_printf_i+0x88>
 8004330:	680d      	ldr	r5, [r1, #0]
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	1d08      	adds	r0, r1, #4
 8004336:	6018      	str	r0, [r3, #0]
 8004338:	062e      	lsls	r6, r5, #24
 800433a:	d501      	bpl.n	8004340 <_printf_i+0xb8>
 800433c:	680d      	ldr	r5, [r1, #0]
 800433e:	e003      	b.n	8004348 <_printf_i+0xc0>
 8004340:	066d      	lsls	r5, r5, #25
 8004342:	d5fb      	bpl.n	800433c <_printf_i+0xb4>
 8004344:	680d      	ldr	r5, [r1, #0]
 8004346:	b2ad      	uxth	r5, r5
 8004348:	4b56      	ldr	r3, [pc, #344]	; (80044a4 <_printf_i+0x21c>)
 800434a:	270a      	movs	r7, #10
 800434c:	9303      	str	r3, [sp, #12]
 800434e:	2a6f      	cmp	r2, #111	; 0x6f
 8004350:	d117      	bne.n	8004382 <_printf_i+0xfa>
 8004352:	2708      	movs	r7, #8
 8004354:	e015      	b.n	8004382 <_printf_i+0xfa>
 8004356:	3145      	adds	r1, #69	; 0x45
 8004358:	700a      	strb	r2, [r1, #0]
 800435a:	4a52      	ldr	r2, [pc, #328]	; (80044a4 <_printf_i+0x21c>)
 800435c:	9203      	str	r2, [sp, #12]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	6821      	ldr	r1, [r4, #0]
 8004362:	ca20      	ldmia	r2!, {r5}
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	0608      	lsls	r0, r1, #24
 8004368:	d550      	bpl.n	800440c <_printf_i+0x184>
 800436a:	07cb      	lsls	r3, r1, #31
 800436c:	d502      	bpl.n	8004374 <_printf_i+0xec>
 800436e:	2320      	movs	r3, #32
 8004370:	4319      	orrs	r1, r3
 8004372:	6021      	str	r1, [r4, #0]
 8004374:	2710      	movs	r7, #16
 8004376:	2d00      	cmp	r5, #0
 8004378:	d103      	bne.n	8004382 <_printf_i+0xfa>
 800437a:	2320      	movs	r3, #32
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	439a      	bics	r2, r3
 8004380:	6022      	str	r2, [r4, #0]
 8004382:	0023      	movs	r3, r4
 8004384:	2200      	movs	r2, #0
 8004386:	3343      	adds	r3, #67	; 0x43
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	6863      	ldr	r3, [r4, #4]
 800438c:	60a3      	str	r3, [r4, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	db03      	blt.n	800439a <_printf_i+0x112>
 8004392:	2204      	movs	r2, #4
 8004394:	6821      	ldr	r1, [r4, #0]
 8004396:	4391      	bics	r1, r2
 8004398:	6021      	str	r1, [r4, #0]
 800439a:	2d00      	cmp	r5, #0
 800439c:	d102      	bne.n	80043a4 <_printf_i+0x11c>
 800439e:	9e04      	ldr	r6, [sp, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00c      	beq.n	80043be <_printf_i+0x136>
 80043a4:	9e04      	ldr	r6, [sp, #16]
 80043a6:	0028      	movs	r0, r5
 80043a8:	0039      	movs	r1, r7
 80043aa:	f7fb ff3d 	bl	8000228 <__aeabi_uidivmod>
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	3e01      	subs	r6, #1
 80043b2:	5c5b      	ldrb	r3, [r3, r1]
 80043b4:	7033      	strb	r3, [r6, #0]
 80043b6:	002b      	movs	r3, r5
 80043b8:	0005      	movs	r5, r0
 80043ba:	429f      	cmp	r7, r3
 80043bc:	d9f3      	bls.n	80043a6 <_printf_i+0x11e>
 80043be:	2f08      	cmp	r7, #8
 80043c0:	d109      	bne.n	80043d6 <_printf_i+0x14e>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	07db      	lsls	r3, r3, #31
 80043c6:	d506      	bpl.n	80043d6 <_printf_i+0x14e>
 80043c8:	6863      	ldr	r3, [r4, #4]
 80043ca:	6922      	ldr	r2, [r4, #16]
 80043cc:	4293      	cmp	r3, r2
 80043ce:	dc02      	bgt.n	80043d6 <_printf_i+0x14e>
 80043d0:	2330      	movs	r3, #48	; 0x30
 80043d2:	3e01      	subs	r6, #1
 80043d4:	7033      	strb	r3, [r6, #0]
 80043d6:	9b04      	ldr	r3, [sp, #16]
 80043d8:	1b9b      	subs	r3, r3, r6
 80043da:	6123      	str	r3, [r4, #16]
 80043dc:	9b07      	ldr	r3, [sp, #28]
 80043de:	0021      	movs	r1, r4
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	9805      	ldr	r0, [sp, #20]
 80043e4:	9b06      	ldr	r3, [sp, #24]
 80043e6:	aa09      	add	r2, sp, #36	; 0x24
 80043e8:	f7ff fede 	bl	80041a8 <_printf_common>
 80043ec:	1c43      	adds	r3, r0, #1
 80043ee:	d135      	bne.n	800445c <_printf_i+0x1d4>
 80043f0:	2001      	movs	r0, #1
 80043f2:	4240      	negs	r0, r0
 80043f4:	b00b      	add	sp, #44	; 0x2c
 80043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f8:	2220      	movs	r2, #32
 80043fa:	6809      	ldr	r1, [r1, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	6022      	str	r2, [r4, #0]
 8004400:	0022      	movs	r2, r4
 8004402:	2178      	movs	r1, #120	; 0x78
 8004404:	3245      	adds	r2, #69	; 0x45
 8004406:	7011      	strb	r1, [r2, #0]
 8004408:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <_printf_i+0x220>)
 800440a:	e7a7      	b.n	800435c <_printf_i+0xd4>
 800440c:	0648      	lsls	r0, r1, #25
 800440e:	d5ac      	bpl.n	800436a <_printf_i+0xe2>
 8004410:	b2ad      	uxth	r5, r5
 8004412:	e7aa      	b.n	800436a <_printf_i+0xe2>
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	680d      	ldr	r5, [r1, #0]
 8004418:	1d10      	adds	r0, r2, #4
 800441a:	6949      	ldr	r1, [r1, #20]
 800441c:	6018      	str	r0, [r3, #0]
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	062e      	lsls	r6, r5, #24
 8004422:	d501      	bpl.n	8004428 <_printf_i+0x1a0>
 8004424:	6019      	str	r1, [r3, #0]
 8004426:	e002      	b.n	800442e <_printf_i+0x1a6>
 8004428:	066d      	lsls	r5, r5, #25
 800442a:	d5fb      	bpl.n	8004424 <_printf_i+0x19c>
 800442c:	8019      	strh	r1, [r3, #0]
 800442e:	2300      	movs	r3, #0
 8004430:	9e04      	ldr	r6, [sp, #16]
 8004432:	6123      	str	r3, [r4, #16]
 8004434:	e7d2      	b.n	80043dc <_printf_i+0x154>
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	1d11      	adds	r1, r2, #4
 800443a:	6019      	str	r1, [r3, #0]
 800443c:	6816      	ldr	r6, [r2, #0]
 800443e:	2100      	movs	r1, #0
 8004440:	0030      	movs	r0, r6
 8004442:	6862      	ldr	r2, [r4, #4]
 8004444:	f000 f832 	bl	80044ac <memchr>
 8004448:	2800      	cmp	r0, #0
 800444a:	d001      	beq.n	8004450 <_printf_i+0x1c8>
 800444c:	1b80      	subs	r0, r0, r6
 800444e:	6060      	str	r0, [r4, #4]
 8004450:	6863      	ldr	r3, [r4, #4]
 8004452:	6123      	str	r3, [r4, #16]
 8004454:	2300      	movs	r3, #0
 8004456:	9a04      	ldr	r2, [sp, #16]
 8004458:	7013      	strb	r3, [r2, #0]
 800445a:	e7bf      	b.n	80043dc <_printf_i+0x154>
 800445c:	6923      	ldr	r3, [r4, #16]
 800445e:	0032      	movs	r2, r6
 8004460:	9906      	ldr	r1, [sp, #24]
 8004462:	9805      	ldr	r0, [sp, #20]
 8004464:	9d07      	ldr	r5, [sp, #28]
 8004466:	47a8      	blx	r5
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d0c1      	beq.n	80043f0 <_printf_i+0x168>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	079b      	lsls	r3, r3, #30
 8004470:	d415      	bmi.n	800449e <_printf_i+0x216>
 8004472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004474:	68e0      	ldr	r0, [r4, #12]
 8004476:	4298      	cmp	r0, r3
 8004478:	dabc      	bge.n	80043f4 <_printf_i+0x16c>
 800447a:	0018      	movs	r0, r3
 800447c:	e7ba      	b.n	80043f4 <_printf_i+0x16c>
 800447e:	0022      	movs	r2, r4
 8004480:	2301      	movs	r3, #1
 8004482:	9906      	ldr	r1, [sp, #24]
 8004484:	9805      	ldr	r0, [sp, #20]
 8004486:	9e07      	ldr	r6, [sp, #28]
 8004488:	3219      	adds	r2, #25
 800448a:	47b0      	blx	r6
 800448c:	1c43      	adds	r3, r0, #1
 800448e:	d0af      	beq.n	80043f0 <_printf_i+0x168>
 8004490:	3501      	adds	r5, #1
 8004492:	68e3      	ldr	r3, [r4, #12]
 8004494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	42ab      	cmp	r3, r5
 800449a:	dcf0      	bgt.n	800447e <_printf_i+0x1f6>
 800449c:	e7e9      	b.n	8004472 <_printf_i+0x1ea>
 800449e:	2500      	movs	r5, #0
 80044a0:	e7f7      	b.n	8004492 <_printf_i+0x20a>
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	080048a1 	.word	0x080048a1
 80044a8:	080048b2 	.word	0x080048b2

080044ac <memchr>:
 80044ac:	b2c9      	uxtb	r1, r1
 80044ae:	1882      	adds	r2, r0, r2
 80044b0:	4290      	cmp	r0, r2
 80044b2:	d101      	bne.n	80044b8 <memchr+0xc>
 80044b4:	2000      	movs	r0, #0
 80044b6:	4770      	bx	lr
 80044b8:	7803      	ldrb	r3, [r0, #0]
 80044ba:	428b      	cmp	r3, r1
 80044bc:	d0fb      	beq.n	80044b6 <memchr+0xa>
 80044be:	3001      	adds	r0, #1
 80044c0:	e7f6      	b.n	80044b0 <memchr+0x4>

080044c2 <memcpy>:
 80044c2:	2300      	movs	r3, #0
 80044c4:	b510      	push	{r4, lr}
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d100      	bne.n	80044cc <memcpy+0xa>
 80044ca:	bd10      	pop	{r4, pc}
 80044cc:	5ccc      	ldrb	r4, [r1, r3]
 80044ce:	54c4      	strb	r4, [r0, r3]
 80044d0:	3301      	adds	r3, #1
 80044d2:	e7f8      	b.n	80044c6 <memcpy+0x4>

080044d4 <memmove>:
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4288      	cmp	r0, r1
 80044d8:	d902      	bls.n	80044e0 <memmove+0xc>
 80044da:	188b      	adds	r3, r1, r2
 80044dc:	4298      	cmp	r0, r3
 80044de:	d303      	bcc.n	80044e8 <memmove+0x14>
 80044e0:	2300      	movs	r3, #0
 80044e2:	e007      	b.n	80044f4 <memmove+0x20>
 80044e4:	5c8b      	ldrb	r3, [r1, r2]
 80044e6:	5483      	strb	r3, [r0, r2]
 80044e8:	3a01      	subs	r2, #1
 80044ea:	d2fb      	bcs.n	80044e4 <memmove+0x10>
 80044ec:	bd10      	pop	{r4, pc}
 80044ee:	5ccc      	ldrb	r4, [r1, r3]
 80044f0:	54c4      	strb	r4, [r0, r3]
 80044f2:	3301      	adds	r3, #1
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d1fa      	bne.n	80044ee <memmove+0x1a>
 80044f8:	e7f8      	b.n	80044ec <memmove+0x18>
	...

080044fc <_free_r>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	0005      	movs	r5, r0
 8004500:	2900      	cmp	r1, #0
 8004502:	d010      	beq.n	8004526 <_free_r+0x2a>
 8004504:	1f0c      	subs	r4, r1, #4
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	da00      	bge.n	800450e <_free_r+0x12>
 800450c:	18e4      	adds	r4, r4, r3
 800450e:	0028      	movs	r0, r5
 8004510:	f000 f8d4 	bl	80046bc <__malloc_lock>
 8004514:	4a1d      	ldr	r2, [pc, #116]	; (800458c <_free_r+0x90>)
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d105      	bne.n	8004528 <_free_r+0x2c>
 800451c:	6063      	str	r3, [r4, #4]
 800451e:	6014      	str	r4, [r2, #0]
 8004520:	0028      	movs	r0, r5
 8004522:	f000 f8d3 	bl	80046cc <__malloc_unlock>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	42a3      	cmp	r3, r4
 800452a:	d908      	bls.n	800453e <_free_r+0x42>
 800452c:	6821      	ldr	r1, [r4, #0]
 800452e:	1860      	adds	r0, r4, r1
 8004530:	4283      	cmp	r3, r0
 8004532:	d1f3      	bne.n	800451c <_free_r+0x20>
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	1841      	adds	r1, r0, r1
 800453a:	6021      	str	r1, [r4, #0]
 800453c:	e7ee      	b.n	800451c <_free_r+0x20>
 800453e:	001a      	movs	r2, r3
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <_free_r+0x4e>
 8004546:	42a3      	cmp	r3, r4
 8004548:	d9f9      	bls.n	800453e <_free_r+0x42>
 800454a:	6811      	ldr	r1, [r2, #0]
 800454c:	1850      	adds	r0, r2, r1
 800454e:	42a0      	cmp	r0, r4
 8004550:	d10b      	bne.n	800456a <_free_r+0x6e>
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	1809      	adds	r1, r1, r0
 8004556:	1850      	adds	r0, r2, r1
 8004558:	6011      	str	r1, [r2, #0]
 800455a:	4283      	cmp	r3, r0
 800455c:	d1e0      	bne.n	8004520 <_free_r+0x24>
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	1841      	adds	r1, r0, r1
 8004564:	6011      	str	r1, [r2, #0]
 8004566:	6053      	str	r3, [r2, #4]
 8004568:	e7da      	b.n	8004520 <_free_r+0x24>
 800456a:	42a0      	cmp	r0, r4
 800456c:	d902      	bls.n	8004574 <_free_r+0x78>
 800456e:	230c      	movs	r3, #12
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	e7d5      	b.n	8004520 <_free_r+0x24>
 8004574:	6821      	ldr	r1, [r4, #0]
 8004576:	1860      	adds	r0, r4, r1
 8004578:	4283      	cmp	r3, r0
 800457a:	d103      	bne.n	8004584 <_free_r+0x88>
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	1841      	adds	r1, r0, r1
 8004582:	6021      	str	r1, [r4, #0]
 8004584:	6063      	str	r3, [r4, #4]
 8004586:	6054      	str	r4, [r2, #4]
 8004588:	e7ca      	b.n	8004520 <_free_r+0x24>
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	200000f8 	.word	0x200000f8

08004590 <_malloc_r>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	2303      	movs	r3, #3
 8004594:	1ccd      	adds	r5, r1, #3
 8004596:	439d      	bics	r5, r3
 8004598:	3508      	adds	r5, #8
 800459a:	0006      	movs	r6, r0
 800459c:	2d0c      	cmp	r5, #12
 800459e:	d21f      	bcs.n	80045e0 <_malloc_r+0x50>
 80045a0:	250c      	movs	r5, #12
 80045a2:	42a9      	cmp	r1, r5
 80045a4:	d81e      	bhi.n	80045e4 <_malloc_r+0x54>
 80045a6:	0030      	movs	r0, r6
 80045a8:	f000 f888 	bl	80046bc <__malloc_lock>
 80045ac:	4925      	ldr	r1, [pc, #148]	; (8004644 <_malloc_r+0xb4>)
 80045ae:	680a      	ldr	r2, [r1, #0]
 80045b0:	0014      	movs	r4, r2
 80045b2:	2c00      	cmp	r4, #0
 80045b4:	d11a      	bne.n	80045ec <_malloc_r+0x5c>
 80045b6:	4f24      	ldr	r7, [pc, #144]	; (8004648 <_malloc_r+0xb8>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d104      	bne.n	80045c8 <_malloc_r+0x38>
 80045be:	0021      	movs	r1, r4
 80045c0:	0030      	movs	r0, r6
 80045c2:	f000 f869 	bl	8004698 <_sbrk_r>
 80045c6:	6038      	str	r0, [r7, #0]
 80045c8:	0029      	movs	r1, r5
 80045ca:	0030      	movs	r0, r6
 80045cc:	f000 f864 	bl	8004698 <_sbrk_r>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d12b      	bne.n	800462c <_malloc_r+0x9c>
 80045d4:	230c      	movs	r3, #12
 80045d6:	0030      	movs	r0, r6
 80045d8:	6033      	str	r3, [r6, #0]
 80045da:	f000 f877 	bl	80046cc <__malloc_unlock>
 80045de:	e003      	b.n	80045e8 <_malloc_r+0x58>
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	dade      	bge.n	80045a2 <_malloc_r+0x12>
 80045e4:	230c      	movs	r3, #12
 80045e6:	6033      	str	r3, [r6, #0]
 80045e8:	2000      	movs	r0, #0
 80045ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	1b5b      	subs	r3, r3, r5
 80045f0:	d419      	bmi.n	8004626 <_malloc_r+0x96>
 80045f2:	2b0b      	cmp	r3, #11
 80045f4:	d903      	bls.n	80045fe <_malloc_r+0x6e>
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	18e4      	adds	r4, r4, r3
 80045fa:	6025      	str	r5, [r4, #0]
 80045fc:	e003      	b.n	8004606 <_malloc_r+0x76>
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	42a2      	cmp	r2, r4
 8004602:	d10e      	bne.n	8004622 <_malloc_r+0x92>
 8004604:	600b      	str	r3, [r1, #0]
 8004606:	0030      	movs	r0, r6
 8004608:	f000 f860 	bl	80046cc <__malloc_unlock>
 800460c:	0020      	movs	r0, r4
 800460e:	2207      	movs	r2, #7
 8004610:	300b      	adds	r0, #11
 8004612:	1d23      	adds	r3, r4, #4
 8004614:	4390      	bics	r0, r2
 8004616:	1ac2      	subs	r2, r0, r3
 8004618:	4298      	cmp	r0, r3
 800461a:	d0e6      	beq.n	80045ea <_malloc_r+0x5a>
 800461c:	1a1b      	subs	r3, r3, r0
 800461e:	50a3      	str	r3, [r4, r2]
 8004620:	e7e3      	b.n	80045ea <_malloc_r+0x5a>
 8004622:	6053      	str	r3, [r2, #4]
 8004624:	e7ef      	b.n	8004606 <_malloc_r+0x76>
 8004626:	0022      	movs	r2, r4
 8004628:	6864      	ldr	r4, [r4, #4]
 800462a:	e7c2      	b.n	80045b2 <_malloc_r+0x22>
 800462c:	2303      	movs	r3, #3
 800462e:	1cc4      	adds	r4, r0, #3
 8004630:	439c      	bics	r4, r3
 8004632:	42a0      	cmp	r0, r4
 8004634:	d0e1      	beq.n	80045fa <_malloc_r+0x6a>
 8004636:	1a21      	subs	r1, r4, r0
 8004638:	0030      	movs	r0, r6
 800463a:	f000 f82d 	bl	8004698 <_sbrk_r>
 800463e:	1c43      	adds	r3, r0, #1
 8004640:	d1db      	bne.n	80045fa <_malloc_r+0x6a>
 8004642:	e7c7      	b.n	80045d4 <_malloc_r+0x44>
 8004644:	200000f8 	.word	0x200000f8
 8004648:	200000fc 	.word	0x200000fc

0800464c <_realloc_r>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	0007      	movs	r7, r0
 8004650:	000d      	movs	r5, r1
 8004652:	0016      	movs	r6, r2
 8004654:	2900      	cmp	r1, #0
 8004656:	d105      	bne.n	8004664 <_realloc_r+0x18>
 8004658:	0011      	movs	r1, r2
 800465a:	f7ff ff99 	bl	8004590 <_malloc_r>
 800465e:	0004      	movs	r4, r0
 8004660:	0020      	movs	r0, r4
 8004662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004664:	2a00      	cmp	r2, #0
 8004666:	d103      	bne.n	8004670 <_realloc_r+0x24>
 8004668:	f7ff ff48 	bl	80044fc <_free_r>
 800466c:	0034      	movs	r4, r6
 800466e:	e7f7      	b.n	8004660 <_realloc_r+0x14>
 8004670:	f000 f834 	bl	80046dc <_malloc_usable_size_r>
 8004674:	002c      	movs	r4, r5
 8004676:	42b0      	cmp	r0, r6
 8004678:	d2f2      	bcs.n	8004660 <_realloc_r+0x14>
 800467a:	0031      	movs	r1, r6
 800467c:	0038      	movs	r0, r7
 800467e:	f7ff ff87 	bl	8004590 <_malloc_r>
 8004682:	1e04      	subs	r4, r0, #0
 8004684:	d0ec      	beq.n	8004660 <_realloc_r+0x14>
 8004686:	0029      	movs	r1, r5
 8004688:	0032      	movs	r2, r6
 800468a:	f7ff ff1a 	bl	80044c2 <memcpy>
 800468e:	0029      	movs	r1, r5
 8004690:	0038      	movs	r0, r7
 8004692:	f7ff ff33 	bl	80044fc <_free_r>
 8004696:	e7e3      	b.n	8004660 <_realloc_r+0x14>

08004698 <_sbrk_r>:
 8004698:	2300      	movs	r3, #0
 800469a:	b570      	push	{r4, r5, r6, lr}
 800469c:	4d06      	ldr	r5, [pc, #24]	; (80046b8 <_sbrk_r+0x20>)
 800469e:	0004      	movs	r4, r0
 80046a0:	0008      	movs	r0, r1
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fc fd46 	bl	8001134 <_sbrk>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d103      	bne.n	80046b4 <_sbrk_r+0x1c>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d000      	beq.n	80046b4 <_sbrk_r+0x1c>
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	200003f8 	.word	0x200003f8

080046bc <__malloc_lock>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	4802      	ldr	r0, [pc, #8]	; (80046c8 <__malloc_lock+0xc>)
 80046c0:	f000 f814 	bl	80046ec <__retarget_lock_acquire_recursive>
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	20000400 	.word	0x20000400

080046cc <__malloc_unlock>:
 80046cc:	b510      	push	{r4, lr}
 80046ce:	4802      	ldr	r0, [pc, #8]	; (80046d8 <__malloc_unlock+0xc>)
 80046d0:	f000 f80d 	bl	80046ee <__retarget_lock_release_recursive>
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	20000400 	.word	0x20000400

080046dc <_malloc_usable_size_r>:
 80046dc:	1f0b      	subs	r3, r1, #4
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	1f18      	subs	r0, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da01      	bge.n	80046ea <_malloc_usable_size_r+0xe>
 80046e6:	580b      	ldr	r3, [r1, r0]
 80046e8:	18c0      	adds	r0, r0, r3
 80046ea:	4770      	bx	lr

080046ec <__retarget_lock_acquire_recursive>:
 80046ec:	4770      	bx	lr

080046ee <__retarget_lock_release_recursive>:
 80046ee:	4770      	bx	lr

080046f0 <_init>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr

080046fc <_fini>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr
